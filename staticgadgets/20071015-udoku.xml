<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
    title="Wei-Hwa's Puzzles"
    description="Regular Puzzle Challenges from a Google Engineer"
    author="Wei-Hwa Huang and others"
    author_email="weihwa.feedback+ig20071015@gmail.com"
    author_link="http://weihwa.feedback.googlepages.com/home"
    title_url="http://weihwa.feedback.googlepages.com/home"
    author_location="Mountain View, CA, USA"
    author_affiliation="Google, Inc."
    screenshot="http://weihwa.feedback.googlepages.com/screenshot.png"
    thumbnail="http://weihwa.feedback.googlepages.com/thumbnail.png"
    height="500">
    <Require feature='dynamic-height'/>
    <Require feature='setprefs'/>
    <Require feature='drag'/>
    <Require feature='grid'/>
    <Require feature='analytics'/>
  </ModulePrefs>
  <UserPref
      name="puzzle_data_20071015_redux"
      default_value=""
      datatype="hidden"/>
  <Content type="html">

<![CDATA[

<style> 
body,td,a,p,.h{font-family:arial,sans-serif;}
</style>

<div style="position:relative;float:right;margin-left:2px;margin-right:0px;margin-top:2px;margin-bottom:0px;">
<A TARGET="_top" HREF="http://weihwa.feedback.googlepages.com/home"><IMG SRC="http://weihwa-puzzles.appspot.com/images/home.png"
     STYLE="border:0px"
     ALT="Puzzle Homepage: Play previous puzzles!"
     TITLE="Puzzle Homepage: Play previous puzzles!"
></A><A HREF="mailto:weihwa.feedback+20071015@gmail.com"><IMG SRC="http://weihwa-puzzles.appspot.com/images/mail.png"
     STYLE="border:0px"
     ALT="Click here to send feedback"
     TITLE="Click here to send feedback"
></A>
</div>

<script type="text/javascript" src="http://weihwa.feedback.googlepages.com/puzzle-utils5.js"></script>
<!---
<script type="text/javascript" src="http://www.corp.google.com/~whuang/puzzlemodule/puzzle-utils5.js"></script>
--->

<script type="text/javascript" src="http://weihwa.feedback.googlepages.com/json2.js"></script>

<script type="text/javascript">
<!-- Javascript begins

  _IG_Analytics("UA-1247731-1", "/puzzlegadget");

  // Copyright 2006 Google, Inc.
  // Author: Wei-Hwa Huang

  ///////////////////////////////////////////////

  function _IG_game_state() {
    this.cur_puz = 0;
    this.puz_count = 500;
    this.puz_solved = new Array();
    for (var i=0; i<this.puz_count; ++i) {
      this.puz_solved[i] = 0;
    }
  }

  _IG_puzzle_pref_controller.prototype.get_color = function(puznum) {
    if (this.game_state.puz_solved[puznum] == 1) {
      return "#00FF00";
    } else {
      return "#FF0000";
    }
  }
                                                                                                                                                                                              
  _IG_puzzle_pref_controller.prototype.score = function() {
    var answer = 0;
    for (var i=0; i<this.game_state.puz_count; ++i) {
      answer += this.game_state.puz_solved[i];
    }
    return answer;
  }
                                                                                                                                                                                              
  _IG_puzzle_pref_controller.prototype.extra_update_state = function() {
    var num = this.score();
    if (num == 500) {
      _gel("numsolved").innerHTML = "All puzzles";
    } else {
      _gel("numsolved").innerHTML = num + " puzzle" + (num == 1 ? "" : "s");
    }
    _gel("points").innerHTML = this.score();
  }

  ///////////////////////////////////////////////
  ///  Primitive Sudoku classes.

  var letters = new Array('A','B','C','D','E','F','G','H');

  function sudoku_cell(id, size) {
    this.id = id;
    this.size = size;
    this.fixed = false;
    this.value = -1;
    this.regions = new Array();

    this.friend_values = new Multiset();
  }

  sudoku_cell.prototype.add_region = function (region) {
    this.regions.push(region);
  }

  sudoku_cell.prototype.get_value = function () {
    return this.value; 
  }

  sudoku_cell.prototype.allows = function (value) {
    return (!this.friend_values.has(value));
  }

  sudoku_cell.prototype.allowed_letters = function () {
    var answer = "";
    for (var i=0; i<this.size; ++i) {
      if (!this.friend_values.has(i)) {
        answer += letters[i];
      }
    }
    return answer;
  }

  sudoku_cell.prototype.add_placed = function (value, src_id) {
    if (src_id == this.id) return;
    var change_happening = (!this.friend_values.has(value));
    this.friend_values.add(value);
    if (change_happening)
      this.changed(this.id);
  }

  sudoku_cell.prototype.remove_placed = function (value, src_id) {
    if (src_id == this.id) return;
    var change_happening = (this.friend_values.count(value) == 1);
    this.friend_values.remove(value);
    if (change_happening) {
      this.changed(this.id);
      this.value_changed(value);
    }
  }

  sudoku_cell.prototype.set_value = function (value, fixed) {
    for (var i = 0; i < this.regions.length; ++i) {
      this.regions[i].remove_placed(this.value, this.id);
      this.regions[i].add_placed(value, this.id);
    }
    this.fixed = fixed;
    this.value = value;
    this.changed(this.id);
    this.value_changed(value);
  }

  sudoku_cell.prototype.reset_value = function () {
    for (var i = 0; i < this.regions.length; ++i) {
      this.regions[i].remove_placed(this.value, this.id);
    }
    var old_value = this.value;
    this.value = -1;
    this.changed(this.id);
    this.value_changed(old_value);
  }

  sudoku_cell.prototype.changed = function (id) {
    // callback -- indicates cell change.
  }

  sudoku_cell.prototype.value_changed = function (id) {
    // callback -- indicates value change.
  }

  function sudoku_region(id, size, dup_ok) {
    this.id = id;
    this.size = size;
    this.cells = new Array();
    this.placed = new Multiset();
    this.dup_ok = dup_ok;
  }

  sudoku_region.prototype.add_cell = function (cell) {
    this.cells.push(cell);
  }

  sudoku_region.prototype.add_placed = function (value, src_id) {
    if (value != -1) {
      this.placed.add(value);
      if (!this.dup_ok) {
        for (var i = 0; i < this.cells.length; ++i) {
          if (this.cells[i].id != src_id) {  // this check isn't really necessary but it pays to be paranoid.
            this.cells[i].add_placed(value, src_id);
          }
        }
      }
      this.changed(this.id);
    }
  }

  sudoku_region.prototype.has_dupes = function () {
    if (this.dup_ok) { 
      return false;
    }
    return this.placed.has_dupes();
  }

  sudoku_region.prototype.has_all = function () {
//    for (var i = 0; i < this.cells.length; ++i) {
    for (var i = 0; i < 5; ++i) {
      if (this.placed.count(i) == 0) return false;
    }
    return true;
  }

  sudoku_region.prototype.completed = function () {
    if (this.dup_ok) {
      return ((this.placed.size == this.size) && (this.has_all()));
    } else {
      return ((this.placed.size == this.size) && (!this.placed.has_dupes()));
    }
  }

  sudoku_region.prototype.is_bad = function () {
    if (this.dup_ok) {
      var dcount = 0;
      for (var i = 0; i < 5; ++i) {
        if (this.placed.count(i) > 2) return true;
        if (this.placed.count(i) == 2) dcount++;
      }
      return (dcount > 1);
    } else {
      return (this.placed.has_dupes());
    }
  }

  sudoku_region.prototype.allowed_letters = function () {
    var answer = "";
//    for (var i=0; i<this.size; ++i) {
    for (var i=0; i<5; ++i) {
      if (!this.placed.has(i)) {
        answer += letters[i];
      }
    }
    return answer;
  }

  sudoku_region.prototype.remove_placed = function (value, src_id) {
    if (value != -1) {
      this.placed.remove(value);
      for (var i = 0; i < this.cells.length; ++i) {
        if (this.cells[i].id != src_id) {  // this check isn't really necessary but it pays to be paranoid.
          this.cells[i].remove_placed(value, src_id);
        }
      }
      this.changed(this.id);
    }
  }

  sudoku_region.prototype.changed = function (id) {
    // callback -- indicates region change.
  }


  ///////////////////////////////////////////////

  function puzzle_data() {
    this.prefix = 'http://weihwa-puzzles.appspot.com/images/';
//    this.prefix = 'http://www.corp.google.com/~whuang/puzzlemodule/20071015-bridges/';
    this.resetPuzzleData(0);
  }

  puzzle_data.prototype.resetPuzzle = function(game_state) {
    this.game_state = game_state;
    var index = this.game_state.cur_puz;
    this.resetPuzzleData(index);
  }

  puzzle_data.prototype.decode_raw_puzzle = function() {
    this.decoded = new Array();
    for (var i=0; i < this.raw_puzzle.length; i += 2) {
      var code1 = (this.raw_puzzle.charCodeAt(i) - 35); if (code1 == 91) code1 = 57;
      var code2 = (this.raw_puzzle.charCodeAt(i+1) - 35); if (code2 == 91) code2 = 57;
      var number = code1 + code2 * 89;
      for (var j=0; j < 4; j++) {
        this.decoded[i/2*4+j] = number % 7;
        number = Math.floor(number / 7);
      }
    }
  }

  puzzle_data.prototype.resetPuzzleData = function(index) {
    var foo;
    if (index < 50) {
      foo = "S'K9:.C,W.x4k0`/8)v4w4R'p9k,n/##r&D);/t#<.{$w0'3G'L9?+q*G,6'/9a'Z0=-J23#L+_.,1y4U.=$,,Q4p'H)/3G4$1S%K0&#m4z3s-O't+x*Z(T%L0Q':,B5?6C#c$/,D%M/)+S%,8-/(*I*e$`,14q3b4E+4,d1;6u$p+G0?%S%N9K2=#i(2,B+6/%1t,T0=9i$V/()W2a3Y.g/70x4p+/+$&18i'H)6%6/T0r.M9;.`(+1P2&#$3u,>%*1.7q(2195&#$,^.B+1)7-c1,9J'$+{$j4*($-S3S0G'q&N1f73-Q4&-e.=%.1K9P0k+N2W'H)U#X28-,1;#w$$5W-17A*b4%1D,J/z4w1-/{'#,I9(#{/+)F4M9.,z,J2A05/)(q02-U%M0#,Y)A6b4H3r0w0L%S%<.g(Z'u34&C#5%#0t,.1b473b(l/)#K9$(H4u,V0;-l5X'Z7w$K#{,T3u,y4L.+&]8'3r&O0>0f.,-y4L.+&]8'3r&O0>024t,G4r4v$*&s6-(:,%(+3i0x4N0%#6)`3^9E9.4w0A)_,P0&*~8Y3)+)#E,T0()D)592(p'?4:0C#C%[3u,+1O0[&d4:+;'59t&i4#1D)M9`'n(v0b3)#T#n/l(U0P0d&%93'b4{+Y.1-b3K$<.80K65&c'H)=%A4u,F4;6?$k,8/F){5Y3x4p0T%4/J'S6<$<-26Y.+18-7-##?4>0/.C9]8;0a/@%2,N&+,R0()X5t6M+N0y0v4R'j826L-:#F0]4F0F4J${+v)U8Q4p1Y.q0w0l(t$2&39k+H)(3Q0Z(W.?0'1x+)3;/Y.T%K9`#$3i0y4x+)3;/Y.T%K9F+^4w0T%M9X0g0Y24$E+]#T0S0S%R%a4G'd1U7<.V3y4#1R%E9m4C(j*&#M0x+Y2g0y43#K$0-Q4G1w6,(,1705'&9,#Z'(0:-{5~3y4h0G)##r-=9H*j4(39%*-D0K/v%`7y,q2L0R'l#L2w0.1";
    } else if (index < 100) {
      foo = "i'&5u%O7X,Z.&#m+70>(2,F)49F&^0U.y&r4p0T%N0H(T-#7C#V%o&T0,)n3;#s$,9G+)5a3*(//7-S%k+=#u(N1y6y4f#F0;-D){49,@9R(d.+#b3s.R0T0N0~6]%q5o+O'd*,19)*1g4n'C9m/g*u$J,~3%1U%^#e(?1S7;-26m+h3%1v4F00(p4n%E9;6r/e4w0*1b4Y'4,U.2&48+(73,1*1;-/659t&s$>0b#,1J,z/58R0-)q2u%s+k*B+~,d29/E(d-s9j4##@%M0t,H)D0n+:#t6(*#5:0`3=)n3t-m9k$^/d4(3.#,19-+1##%,^0V*r4(3T(#38-{$S%m45,Y)785/q0~4{,:-s+y659V%H2N0U3#-t,S0z4@$5,Y)485/:%;+Q,c,(#L9M*8-6/F0u+[30-R%M9&,^'h($#z4T#c*U%o(%#-(i-U8A4?2c3H4$1R%Q0K9+#`#.,;-Y(`/v,+1c*o%'7;()5N09%k.3-;-y4:#H0x'p-^9g*+3,1S%#*<6F&<-a3N0:0g2%1x4C#q4^(_/T-K9z,B++-R0u.T%:9U(6,,.~4W.R%:-H9;0-#731(D.u,(,$1v48/5'K%)4;,t-J2B/A)c,2,>%43#*u7L0[2*3n0T%^0&*T&#-H2a3_#f.?%c,{+u4V0l6r&(*=%g/7-R0I9G&Z'l/K2r4x,l+$%T%.1*3_':$$.M9E,o02-{$(*Z7K,w0f5H2a$34t,;-n9B0o'c*S%j4:+o3u,y4D9t4+%U.T'{+c*6)D$t#O'B#P%>4J9$,H,m/#1R%{4U$W-l6&'N05/^.T%>(W'>(1->4)#L9U(&+8-y4O'4#~79._4W5s&%11-$%N06,Y-u6(#z4'3@0&-T%P0J.'9&'@#b4Y.#-U,S0J)%5n%T7X,Z.F,[3+1D)N0E&:+%*S7z4g*i3h0y4k5m#l(i0K669f4{2t,S0%*49s+U.W%A4Y.y'*3G%^,p013G()9@#U.F4w0v4";
    } else if (index < 150) {
      foo = "z4`#o'(0h*[,$-M02)J$37I)x(m/h*;#p0w0G%U%G1v6e8d3h*C#f$w08)y4'#v47(K,U/59&3k4p0S%A*9(g,@1;6y49%u,v0F)N9w$F0-(I2b4x,R,+)v4K0)#`+w)]8b4Y#E,k0F){+L2C#489/o',(F00)U%R7p+K#N*b4N0:0q*8%w4L0?%y26'59X7.4;+O0m3K9P04$:+8'j4&-Q2)-.1%,V*Y)<6S0.1%-X2v0w4%,V*Y)<6S0.10/e.T%R%U%/639$(x*>0e*t+:0?3&#b'R0#-Z5T7^4j4g08-{+]0/&l8~'t&o0n/>)m3x47#,0S-o6_'?+I+H4B#y4O0L7F+6&3#e/)3+1D)A*a7#-C4b1'#T3^2t,8-%#2(>-H5$8V0o*K,F,=(x1m'=9y,H2a38/T3#-T%I9B0#3-'>$D.04F0U%7-/(x*e$*1`4K91$t+B4t#P0K9;(u,P2N&,)E0<%;-J9;$'-y21'V0Z({2+1S%s9f4b+i(W.3#`$z21-F4F)`3,.y7Z.$/@024p0U%n'B9f4b*U&F0a/r*4-G4%9D#%5i/D+<.v,l+,1T%R%'3Y)58^0{+/4k.G%T%X0'5&&s6G'%,S3//H4#%q&6#)0T-l8D444J+`$X+;-m2w%_7e(L'H'w05%H4t6s&D#61e3[,`/>07-R%N0V%$5[)J6s+A/r*T,5'0(:.e$,1H2M9L2l.9-T0C,W.B*Z7b4Z5g.`2$1w4/().G#:518.1a/70k0x4N'802#b3>9o8q/s.@);-z4a'_0T->6<$.3@09-S%{+f4{#u)<6N0(-n/8-R0T0F%f3c*R'M9I,D,:0;-K9P0b4t#?*k+~4d*Z(.1K#a-w7v0^3*3U3i0{,*1K#a-w7v0^3*3U3i0&1S%t6e(l0n2z%2,1)#3v0*1a3f*C#9/&*n9d.#3p0v4;6V%)5,.^'F0F,o3u,+1M96$O+R(d.z4[.{+p(I$x4V7U+U($/+#8%#-Y,?(";
    } else if (index < 200) {
      foo = "49w+l'W%>460>$X.3-x4*,Y,,#'3Z9E9O,q0+){/*,Y,,#'3Z9E98$t/L0m3~#x)b8)4-0$,6413u,x4'#v47(k,G1#7W3$1?4J$O'O0C.k83#5&H2</y0U%$,+&M8b2_0O'a/M0*-U%M0b3T-w6W%K#O2y*N,*1*,[0m)[6R%`#C,5/Y,I$:0B#=):5#7X7c/C/J%G4N0&+=%l5R7)9b$`,c,f'z4>#^(_/s+K9?+C/7-D)H3])X6?%K0&,i080D)D)O'J9J0q/]4H2#(S070`,=9C4-6>+s&/(/3A4p0*19/p'D9M%a3b*X#1-`$`,{+R8p2_#l(Q0(,44i0;-M9R0m0K2P'$,*4_,T(Y+O'v,X2^&K0M9J'l.R,2,N0W24$W-A9O8.)+1K0m3P0I#-9A+~4e3t*k*~,M/w4_#`((0L-n91$6/4-H)'2U7a'(%95Z4`.e.4-F4;#x$h4d7B+(*//d.D%m3#5'#B0P/&*{+>0+-S(J$S'I9a,w0]4>#Q3A4/)U%g1Z6M%Q3,.E+d*j48-T%B+-'m$:2(9z4l0F07-R%].^#z574o+L9~(k*24;-%#79.,61*3k(q*44,1S%E9V%H#%2u+_'_/T3=)R%E9V%H#%2u+_'_/R20-;-0((,i$U/-6Z4_#U3i0y4M9t$D0x'=-(3,)u/*)?(S'G#%9c,,1'290u/*4w4-/r&;9O,/6j4.#E0?0L$O0y4S-r6&'T$V.8-`(e(<.u(N1K7y2_4r024w0v459p+I#53k(H)y'6/1-{$v4M'/'(%g1{+j0X(.$g(.'s$:5D7;-L.+4>0J,L$;#l$e/[+P)/6X#s.K,y4J578C#H%5,O'%#*-Y,7-Y3E+A9O86#Q0a/s/^(n3>0z#t)i8J2%,k083o0v4o+A#h4785/(*a/70+1R%;-J2m$b1t6I*`#k4g0,1M9.(#-+4U.72/$R2p0x4)+S%39%(^05/`$909)v4q)28=%26b*2,7%i4t,+1";
    } else if (index < 250) {
      foo = "$585M6<$a'h(U#$19%T05/r&G$_,j4M9Y'S2p0:-N0Z2L$$.o'%*0){26)$%{+G9=%H3e(Y.=+e2u0H)A*{/%-53u7)9Y#i31-v4O'@6,%32j4*,9%`26)y4O'@6,%32j4*,9%`2o0;-l-k86#.0G'h(P2j4u,:-s+)379<8u1U.[3{/_,T%@#?%53i(&,M9R(r*N%<3;-)3i)28Z.L#h/G4w0w4P'z+^1e8H2f&m*#0S%I/U.3&]7c,h'A**4U3,1T%,,u(N1v6###59%P+7-`,'2b3=9H)K#~#a4T0M%;(H)d5+#U7X,g1R(44p0U%j4p/X0~)<6C64)d4n0T%O'n8)5h*t$F0##`,/)=(2,7-X9>'#&>0r&R,_/3-D+^'F025A6m8(#?4v0v4<0Z6O%U5s+E+%#_2v0w4<0Z6O%U5s+E+%#_2$18-x$H0`7t,,3%*'($-u$`,t61(3,7155;#Z4d.>)8-2,~47#P/(*h(R3r4v0T%2,~47#P/(*h(R3~41-l(t6I)-6P-W.F00(G4#1v4{+(#m'n)28#50$P+0);-v4f*f$=/p'=9`#%1D)+1{5w(~1U8k+g*7%q*1-n(U2_#t#b1U7*,V3X2v0y4v6a'k,w.S%E%<%n/C%y4)5r)>85/###,q&&+F)b,.1-3j)~7c*K#80d.$1;-%#-(l-j8x1^0]4*-G%T%6/0(g-v7H2)5l4`2%1S%9/m'a-{7J2j4a$`,M%x4;0I#:91(8-k5L,#0;-*12,S%q$b1s6_'=#q0F%H)z+p0F3n)y7E#8$o3t,S04$A+'9h.'5{5+3f2v0y4B+q&5#%0u9=9L'80u,G4b'i(`,7-%#J9$(+1#-#%5#.,~4h1t6h(:%34g0x4y+%#R4g1g'@)*-34=)H)h5m2x%V7=05/T3r*h(?)?6D#?-:5?0'2D+a/j0.1^0(9<#=-'3/(i4~3i0.1N9g*>%.37(V0(3m+[,{$n9B0o')+R%<$T#P+j0y4";
    } else if (index < 300) {
      foo = "4/J';#m8Z5{+Z#;+E%G4L9q(o0#3>#{+4/1-n/T%d1U7<.,3K'C#)4i0)),1z+N'80Y.y4M9z,<+T0H$M9K'6'I$y+N0&3</J,K0M0b3Z+.)+#M974@08%:-*1K2V&s-u6W'd3]4#-T%C6`#:,9.80z4=+`,R00-t-t9C%Q3_'i(z2s.?)I$o';9d$^/#,#5^4$1u,:-N0u-n6&'D#b4a$+1D,(+P0K9A*R3j*U%04d*G4T0G)p4e$:2%9{+]3W.70+15/5'M%U5X9$,p$b3)-y4L0-#g't,W5f9M+M0K0H)L9h'r4K,r13#d$#3$1H)[4,#Y'`7^,g1F,73w0U%V&e(G'8-Z5T7K'73i0,1O'g8Q4n/)+&#q+]4*-R%A4p/Z+;'6&n%{,Z38-D)T%o4C,g1u6W'.)q0>%T%29T+u(m/]4H27$+3,1*1t-D6d#e(70z45)6/+)y4O0@#d4:+/(M9/4h084z/n/r-k9P(_4(3g.^.$1x4K9w$'2_3G'H)./s.U%:-#,z5V0=%s6%9~(i074.1N0n'y)s93#?$5%/,^$V0H).6T-=63#P0r&J,T0n(O'y+~4?6W0?2R2z+T3M0O'#5:0U.K9{+~(M08-R%Q'(,F0U%Z5;6B%W.:-b,@$',)4f137Q'S'v,E0S%j4v+p#Y)l948:%80@)G4#,t$_1M8U2o'))03i0x4O'f.D$o-X9z4c/83$17-148/%0'.;659t&K/L%7-n+:#D0Z8(3Z5R'03t,G4{4b&q%z64([,~4k4#-7-?6D#%5T-y1F0Y294,1S%?6D#%5T-y1F0u+~4,1*1O'y4]7],2&7#d$T0$1;-D)I2e$)2T7=9`#G0,-$%P0G#p%z6/(#5,)X(5$C$M9<#&%*1X'/(+#L,N,e2<2699(_,[4+#-4J2,1:-P0K9.#t#M*{+d.p3{,T%)#h4v+17a'^0,4V+S%R0b*$&,8?2g'G)c**1:)R0%96#C(K,72,1o/f.N%?(";
    } else if (index < 350) {
      foo = "'.:#D0d7I)o'=%%1A)7-F0l/J'<6f4[58/Z3i0y448v.^%A5r+K'i0?4+1F)P'z+]%25[6N0N+13$1H)/(s-X6B%:360J'V.G4+1w4S'S$o-60'2+)Y3i0,1j41(*&s6p1^0l*K/+-U%,3X*E9Y,W.3#K2?41-`,,3X*E9Y,W.3#h/`26)o(L9h'n4f/e*;#>%J28-G)M/G)(,f$d9%99/(,u0U%%96#x3D.?05/[3x40-R%g'F)E0~7g*6&[#`,Y(x4z4Q0k+<'v%t6-)>0=)U%z4c*e$H1d9~7Z.o/+)U%e/=+1'm$w4M9$3/,a$K/#,t$72T8y2(*D,S3i0w4N0x6o'H2>$D.f$D/84K$t6I)'5d-:#N&4/^28-:-P0#*G7c*k5j4X#o48-+1P0#*G7c*k5j4-4`3+1*1%,H#%9G)p4>0;%T06%?(M94/G'T3=.c,+42'z+#0i8h5-+q%6/F0l*l.--H4{+{4p''*$#N004p3t,H)L7U+x(O1z4&#k$v/A)U%P0&*s9=%H2{+*(a/S%V+%,d&<9>4G'H)h0*-/)R%s+F+<2?1>6y4R'v,80x4k970/#`+w)j4a$)3p0x4N0F+P)m2M&L$##g/L%$%1++&]8'3M'O0r&.($0r#p1r&e8Y3b+l-k*7/--U%?269*,S%(3o&U3p4w0T%{+>9r(l0l2^#x'_/G)1,N0,#d#6)26V5X#&1--y4s&E#p4K,g1T76$l.D%{/s&E#p4K,g1T7w,M0R,v4L0^#B(L-59z40#a3v0.1##23?(<.>0J9/#q0+-b,F08,t)M8I2,3o+`/j0.10917;)e39#u$J,+13)J$w4E+Y)=6F0?2,-a/))V0O0f'b45&d9k+i0R,70w4^0695(,.##x4U3D,1-R%60w.?%)3#779b2b3#-_,R'w4K#2&D0r/90].L%c,w4R'_0?1L6<$$(g2#17-{+(#$5[5`'h(P2(,C,=(.1*37(-+6&v%=0-4,1S%";
    } else if (index < 400) {
      foo = "J9X'9(D,U.z4M'Z,a$o3K9P08)W3j*t#H2#0i0.11(E.%5o%(760@0j0?4D)6/X'i3G.)9C#l0g/60n(N0S'%5P-Y6N&y2u,[,r#Q00(/,<%y2M944`,^$?(=/>(1-64H9'#?+n/,)y428=0L'q2x%2,z'(,v$s#M9&#~'Y,c4s5e4S,H0e'_'j(G#U5(.2,24n/=%T0B+F)s5b1?6u$b$e4i0,1B+q&E%U5v9N0M2x*x,:-@9I0E(B+~4H2v+#0P(o(@9I0E(B+~4H2f*k.$1;-.609[+*)3#N0k+,1F%z$L9D#Z4U+h(/(^$./S%F)'96#8,e(42b4~,U3+1T%$,A#g0:5v6784)e.K%w4L0Q'3#D7E.)5.#z+D0A)p/:-{5q&G#-9.4W.--V0s+6/4#M%-6Z5f*V.y0G)A0f't4b&39k+S3l.8-T0{5H0`7t,L'%*[4[4%1D){5H0`7t,L'%*[4[4p0*1M9v4M'{*e$n/#,&1:)D)[6A%H3e(q1{+&#`,M,@3T'@#L%74,0t-,4q*i3~,;#t$d9S7S'{4k0>0H){$>#)%M1U7w4S'G,//7%>3z+T'$&48Z4p2~,~3p0T%-#n#s(Q1a7=-S3/,y$r.U%U5%9n/G+h(X(@0,)v4N0%,y##*c5b4+3e.E%=(N0E)k5s-T7##I0Y2#1H)E+f'L%94b1A6f4`/=)G)*,f$?/D)I2M9b.@4u,G4.1C5Y7C,6*l''(S3()o(e.=$M%U5w6i'i$>31-F4Z4Y.27I*t-s+`/E,{$z$#5X,1/&'R$-9B0T08)D)N0N'Z435L9{+](f21-F4j4>$c'Y)l948A%34h0x4U8,3Q4Y.3#*,g4]4v0R%M9@.Z4//1(h(Y,+3,17-%,&5E91*9#>0?%i0J,%0L9{4k+h*M0O'0/`,D)D)V7E.)5]#~'60o/a/9%y4/(c*F&J518m8h.i3u,G)n/A-J5w68'(#^2:4p0,1z4`#j'L-78n/,4t+_$+1";
    } else if (index < 450) {
      foo = "&,l'-9.4Y.u.R2q*M%{$p'B9f4X,Y.<$]4r4u0*1N0f#A(7-<6.9?+6)n/s#U.T%r4C+i)N9e$e.$1x4*54&u)V.s+[,x&6/G)7-P0K9D%X3:+Q*%#C+V0Y+(*<64$X,.1s5u+J+--T%(*<64$X,.1s5u+#0&1v4M9e*>#@4W'H)))Y,{$>3W'l3K,.1##K9$(`,F,g2$#r+_',801Z5-4d.@4;(N0?$5,Y)j8k5k0(,Y(%0&#K0h)L7:,z4V(=/M%S%##f(>0[5m8{+V3l+G)*1u1I#=9{,)303j3e4w0*1u1I#=9{,)303j3e4w0*1Z4L#E9q/D+_'m$,4{,y4e*k#^()029z4]3x4w0G)S'I9k+f*x4N09$`,*4=3>08/k-S8X2T$G'=/8-#%D7g*C-@48/i'`$K2o0,1D7g*C-@48/i'`$K2+1:-y4i(%2E7j*5&I'e.U%S072'5q)<6]#%,b*#0{,U%59-,i$P/s&y4V'~3i0H)g(m/V-l6N2)5~3~4#-{$x41(j*#$@960R+U3,1T%C#A%C3&*L0&,80O'U%;-E9m4R$^,4/q&c#Y2w0y4D48/g'>66#:,7%k*I4T0;#t$g)S7k5)5^463+1T%K#4&z/3-64W'D,[4#1v4J2x%d7+.o'N0-$'(83n.#,v$K/()p2-9B%X2%1w42,S%U'r&L0M9I,g/,)>(%,J9E#n0#3_'b/?4t,F)%,)%[1P8^2T'U3^.&-T0U%_3k+U/&*I*y'L0E)l(T-u6m$?2H2r49%#-h$c,k+A#a8Z5`'h())P+F%$%z4T'Q6,%?1{+0/x*^/g(K9=#608)`3k5s&O'H4r#593,*5i(V.+#j0F0w0v4.#u#K)A5T7N0d/`,`$2,M9i(X0=%.3k+,#94w0v4H2x%f7C-^'h(H'K0F)l(59:(k,5/v4&#@%=//)y4K#W-/7*)e3L0@0w0*4b,k5a+w)]8K0(#/$]..1:-O'62r44&T7b*g*o/A)$%";
    } else {
      foo = "(#n'A9#-@4F0d/j*'1;--9@/E(3-e5H28/T0*-D))5>9e,U.<$Q'70W21-G4.1b3$+i$l'%9y'(,q0*1#,t$p1='B9b4'-D/*-U%-&i8).-+?06/&#]''1v4Z4I209'79([,~47/?)U%A*S7-9w$U.z4]4./,)#%z+/#R/Y)l8r4)#s.$1;-5/{'z*v%H9z4h*i*S%`,v6j(y.z%k+z4)3x41-R%V0~4''F$p-s6Z#d*L0H)B0T/x)j8q+b*W.+-,)x4P'z+;#>4Z9E9H,R3+1*1L9@._4W.X'7(h0q*e$$%z+P'J%)4g1v9u+?0*1*1L0m5g'v,3#M9P(0/%1S%L0m5g'v,3#M9)4j0w0R%2,u480J6^#(*r++3i0:-2,u480J6^#(*r+^4%17-18<0T2#$1(2,V.k.@4Z+L9{47#4(D,>0$-w01)H4:-_2o$^/I9T'Y#F4v0y4P'i42,[.I#=9i$F0F%G)804#k3G.'*g'))73$1v4J9%,=)/4].t#6$/,R,u.-92/<'W&c,.,Q2p3,1T%M9i'p4J,Y.<$[3`2n0x4v9S%6#(0V-_'70T094q#Z.L#x)e8`3s+Y.S07%c,&,M0D9()p2~#L2/,t/C$<6/#n'n-,1F0q0l.1-w4#5v$-/&'U7-9T2X2$17-z4(27(L-<6u6Y#X.G)=(Y,?0W'25?6o8H,44w0U%J92(1-14p1C#4#f.:4F4L9E.~4e.~#h(y2Q+o$S%K9P0+#:+F)s5S2t/C%R%[,6/A*1&;6z4B0?30-U%Q'l9^0v%.,Z43)80E4I/M9T%o4R(d.s+Z#S0T%n3z4d$-/B*(,M9L,e.>)o3>2B9d4n#^(k+%#%13)c,z4r&;#b-^9T7Y#L0=)2,P'%,G#b1f5r4K'J+:-,1=9x$K#A+e'j4a$^.>)x4S6w$$$g)2,b4S3J2/);-H)r5s+A1>6S6l0h/?)U%^0]1^8X3:+K'W3&+E)T0n9I0G(#-y2J2&-f.G)F)";
    }

//    if (index < 50) {
//      this.size = 4; this.chunk = 12;
//    } else if (index < 100) {
      this.size = 5; this.chunk = 20;
//    } else if (index < 150) {
//      this.size = 6; this.chunk = 22;
//    }
    this.raw_puzzle = foo.substring(index % 50 * this.chunk, (index % 50 + 1) * this.chunk);
    this.puznum = index;

    this.decode_raw_puzzle();

    this.area = this.size * this.size;
    this.row_regions = new Array(this.size);
    this.col_regions = new Array(this.size);
    this.box_regions = new Array(this.size+2);

    for (var i=0; i<this.size; ++i) {
      this.row_regions[i] = new sudoku_region(i, this.size, false);
      this.col_regions[i] = new sudoku_region(i + this.size, this.size, false);
    }
    for (var i=0; i<this.size+1; ++i) {
      this.box_regions[i] = new sudoku_region(i + this.size + this.size, (this.size-1), false);
    }
    var i = this.size+1;
    this.box_regions[i] = new sudoku_region(i + this.size + this.size, 1, false);

    this.cells = new Array(this.area);
    for (var i=0; i<this.area; ++i) {
      this.cells[i] = new sudoku_cell(i, this.size);
      this.cells[i].add_region(this.row_regions[Math.floor(i / this.size)]);
      this.row_regions[Math.floor(i / this.size)].add_cell(this.cells[i]);

      this.cells[i].add_region(this.col_regions[i % this.size]);
      this.col_regions[i % this.size].add_cell(this.cells[i]);

      var box_num = this.box_num(i);
      this.cells[i].add_region(this.box_regions[box_num]);
      this.box_regions[box_num].add_cell(this.cells[i]);
    }

    this.palette_count = new Multiset();
    for (var i=0; i<this.size; ++i) {
      for (var j=0; j<this.size; ++j) {
        this.palette_count.add(i);
      }
    }

    this.affix = function (index, value) {
      this.cells[index].set_value(value, true);
      this.palette_count.remove(value);
    }

    for (var i=this.area; i+2<this.decoded.length; i += 3) {
      var pos = this.decoded[i] * this.size + this.decoded[i+1];
      this.affix(pos, this.decoded[i+2]);
    }

    var callback_this = this;
    callback_this.cell_changed_callback = function (index) {
      callback_this.cell_changed(index);
    }
    callback_this.value_changed_callback = function (index) {
      callback_this.value_changed(index);
    }
    for (var i=0; i<this.area; ++i) {
      this.cells[i].changed = this.cell_changed_callback;
      this.cells[i].value_changed = this.value_changed_callback;
    }
    callback_this.region_changed_callback = function (index) {
      if (index == -1) return;
      var pos = index % this.size;
      if (index < this.size) {
        callback_this._IGG_refreshCell(2 * this.gridsize * (pos + 1) - 1);
      } else if (index < this.size * 2) {
        callback_this._IGG_refreshCell(this.gridarea - this.gridsize + pos + 2);
      } else {
        callback_this._IGG_refreshCell(this.gridarea + this.gridsize + pos);
      }
    }
    for (var i=0; i<this.size; ++i) {
      this.row_regions[i].changed = this.region_changed_callback;
      this.col_regions[i].changed = this.region_changed_callback;
    }
    for (var i=0; i<this.size+2; ++i) {
      this.box_regions[i].changed = this.region_changed_callback;
    }

    this.gridsize = this.size*2+2;
    this.gridarea = this.gridsize*this.gridsize;
    this.colors = new Array("#A9C5EB", "#FFBBBB", "#FFFF88", "#DDF8CC", "#CEA8F4", "#FFBBFF", "#BBFFFF");
  }

  puzzle_data.prototype.box_num = function (index) {
    return this.decoded[index];
  }
  
  puzzle_data.prototype.save_progress = function () {
    pref_controller.setPrefs();
  }

  puzzle_data.prototype.increment_palette = function (index) {
    if (index == -1) return;
    this.palette_count.add(index);
    this.cell_changed(index + this.area);
  }

  puzzle_data.prototype.decrement_palette = function (index) {
    if (index == -1) return;
    this.palette_count.remove(index);
    this.cell_changed(index + this.area);
  }

  puzzle_data.prototype.value_changed = function(value) {
    this._IGG_refreshCell(value + this.gridarea);
  }

  puzzle_data.prototype.cell_changed = function(index) {
    if (index >= this.area) {
      // palette or bulb.
      this._IGG_refreshCell(index - this.area + this.gridarea);
    } else {
      var row = Math.floor(index / this.size); 
      var col = index % this.size;
      var box = this.box_num(index);
      this._IGG_refreshCell((2*row+1)*this.gridsize + (2*col+1)); // cell
      this._IGG_refreshCell((2*row+2)*this.gridsize - 1); // row
      this._IGG_refreshCell(this.gridarea - this.gridsize + (2*col+1)); // col
      this._IGG_refreshCell(this.gridarea + this.size + box); // box
    }
  }

  puzzle_data.prototype.isSolved = function() {
    for (var i = 0; i < this.size; ++i) {
      if (!this.row_regions[i].completed()) return false;
      if (!this.col_regions[i].completed()) return false;
    }
    for (var i = 0; i < this.size+2; ++i) {
      if (!this.box_regions[i].completed()) return false;
    }
    return true;
  }

  puzzle_data.prototype.blank = function() {
    if (pcborder == "#FFFFFF") return '';
    return '<img src="' + this.prefix + 'blank.gif" alt="-">';
  }

  puzzle_data.prototype.black = function() {
    return '<img src="' + this.prefix + 'black.gif" alt="-">';
  }

  puzzle_data.prototype.get_background_color = function(index) {
    if (index >= this.gridarea + this.size) {
      // box light
      return this.colors[index - this.gridarea - this.size];
    } else if (index >= this.gridarea) {
      return "#FFFFFF";
    } else {
      var g_row = Math.floor(index / this.gridsize);
      var g_col = index % this.gridsize;
      if (g_row == this.gridsize-1 || g_col == this.gridsize-1) {
        return "#FFFFFF";
      } else if (g_row == 0 || g_col == 0 || g_row == this.gridsize-2 || g_col == this.gridsize-2) {
        return pcborder;
      } else if (g_row % 2 == 0 && g_col % 2 == 0) {
        var row = g_row / 2 - 1;
        var col = g_col / 2 - 1;
        var reg1 = this.box_num(row * this.size + col);
        if (reg1 != this.box_num(row * this.size + col+1)) return pcborder;
        if (reg1 != this.box_num((row+1) * this.size + col)) return pcborder;
        if (reg1 != this.box_num((row+1) * this.size + col+1)) return pcborder;
        return this.colors[reg1];
      } else if (g_row % 2 == 0) {
        var row = g_row / 2 - 1;
        var col = (g_col - 1) / 2;
        var reg1 = this.box_num(row * this.size + col);
        if (reg1 != this.box_num((row+1) * this.size + col)) return pcborder;
        return this.colors[reg1];
      } else if (g_col % 2 == 0) {
        var row = (g_row - 1)/ 2;
        var col = g_col / 2 - 1;
        var reg1 = this.box_num(row * this.size + col);
        if (reg1 != this.box_num(row * this.size + col+1)) return pcborder;
        return this.colors[reg1];
      } else {
        var row = (g_row - 1) / 2;
        var col = (g_col - 1) / 2;
        var reg1 = this.box_num(row * this.size + col);
        return this.colors[reg1];
      }
    }
  }

  puzzle_data.prototype.set_background_colors = function() {
    for (var i=0; i<this.gridarea; ++i) {
      _gel(grid.getCellTDID(i)).style.backgroundColor = this.get_background_color(i);
    }
  }

  puzzle_data.prototype.get_src = function (reg) {
    if (reg.completed()) {
      return this.prefix + "green.png";
    } else if (reg.is_bad()) {
      return this.prefix + "red.png";
    } else {
      return this.prefix + "white.png";
    }
  }

  puzzle_data.prototype.get_title = function (reg) {
    if (reg.completed()) {
      return "Completed";
    } else if (reg.is_bad()) {
      return "Error: Too many duplicate letters";
    } else {
      return "Letters left: " + reg.allowed_letters();
    }
  }

  puzzle_data.prototype.get_row_info = function(index) {
    var answer = '';
    answer += '<td align="middle" valign="center">';
    answer += '<img src="' + this.get_src(this.row_regions[index]) + '"';
    answer += ' title="' + this.get_title(this.row_regions[index]) + '"';
    answer += ' width="24px" height="24px">';
    answer += '</img>';
    answer += '</td>';
    return answer;
  }

  puzzle_data.prototype.get_col_info = function(index) {
    var answer = '';
    answer += '<td align="middle" valign="center">';
    answer += '<img src="' + this.get_src(this.col_regions[index]) + '"';
    answer += ' title="' + this.get_title(this.col_regions[index]) + '"';
    answer += ' width="24px" height="24px">';
    answer += '</img>';
    answer += '</td>';
    return answer;
  }

  puzzle_data.prototype.get_box_info = function(index) {
    var answer = '';
    answer += '<td align="middle" valign="center">';
    answer += '<img src="' + this.get_src(this.box_regions[index]) + '"';
    answer += ' title="' + this.get_title(this.box_regions[index]) + '"';
    answer += ' width="24px" height="24px">';
    answer += '</img>';
    answer += '</td>';
    return answer;
  }

  puzzle_data.prototype.palette_html = function(value, count) {
    var answer = '';
    var letter = letters[value];
    if (count == 0) {
      color = "#C0C0C0";
      answer += '<span style="cursor:default;font-size:16pt;color:' + color + '" title="' + letter + ' (gone)">';
      answer += letter;
      if (this.tiny) {
        answer += '<br><div style="align:center;font-size:7pt">(0)</div>';
      } else {
        answer += '<br><div style="align:center;font-size:7pt">(gone)</div>';
      }
      answer += '</span>';
    } else {
      answer += '<span style="font-size:16pt" title="' + letter + ' (' + count + ' left)">'
      answer += letter;
      if (this.tiny) {
        answer += '<br><div style="align:center;font-size:7pt">(' + count + ')</div>';
      } else {
        answer += '<br><div style="align:center;font-size:7pt">(' + count + ' left)</div>';
      }
      answer += '</span>';
    }
    return answer;
  }

  puzzle_data.prototype._IGG_getNormalView = function(index) {
    if (index >= this.gridarea + this.size) {
      return this.get_box_info(index - this.gridarea - this.size);
    } else if (index >= this.gridarea) {
      var number = index - this.gridarea;
      return this.palette_html(number, this.palette_count.count(number));
    } else {
      var g_row = Math.floor(index / this.gridsize);
      var g_col = index % this.gridsize;
      if (g_row == this.gridsize-1 && g_col == this.gridsize-1) {
        return "&nbsp;";
      } else if (g_row == this.gridsize-1 && g_col % 2 == 0) {
        return "";
      } else if (g_row == this.gridsize-1) {
        return this.get_col_info((g_col - 1)/2);
      } else if (g_col == this.gridsize-1 && g_row % 2 == 0) {
        return "";
      } else if (g_col == this.gridsize-1) {
        return this.get_row_info((g_row - 1)/2);
      } else if (g_row % 2 == 0 || g_col % 2 == 0) {
        return this.blank();
      } else {
        var row = (g_row - 1) / 2;
        var col = (g_col - 1) / 2;
        return this.get_cell_html(row * this.size + col);
      }
    }
  }

  puzzle_data.prototype._IGG_getSourceView = function(g_index) {
    var pos = g_index - this.gridarea;
    if (pos >= 0 && pos < this.size) {
      return this.palette_html(pos, this.palette_count.count(pos) - 1);
    }
    var index = this.gtoi(g_index);
    if (index < 0) return;
    return this.get_raw_cell_html("", "?", "#FFFFFF", false, !this.cells[index].fixed);
  }

  puzzle_data.prototype._IGG_getTargetView = function(target, source) {
    var pos = target - this.gridarea;
    if (pos >= 0 && pos < this.size) {
      return this.palette_html(pos, this.palette_count.count(pos) + 1);
    }
    var value = source - this.gridarea;
    if (value < 0 || value >= this.size) {
      value = this.value_at(source);
    }
    return this.get_raw_cell_html("", letters[value], "#D0D0D0", true, true);
  }

  puzzle_data.prototype.get_raw_cell_html = function(title, value, color, is_bold, is_draggable) {
    var bold = (is_bold) ? ";font-weight:bold" : "";
    var cursor = (is_draggable) ? "cursor:pointer;cursor:hand;" : "";
    return '<span title="' + title + '" style="text-align:center;' + cursor + 'font-size:16pt;color:' + color + bold + '">' + value + '</span>';
  }

  puzzle_data.prototype.get_cell_html = function(index) {
    var value = this.cells[index].get_value();
    var fixed = this.cells[index].fixed;
    if (value < 0) {
      var allowed = this.cells[index].allowed_letters();
      var title = (allowed == "") ? "No letters possible!" : ("Could be: " + allowed);
      return this.get_raw_cell_html(title, "?", "#FFFFFF", false, false);
    } 
    var title = fixed ? "Given at start" : "Placed by you";
    var color = fixed ? "#008000" : pcborder;
    return this.get_raw_cell_html(title, letters[value], color, true, !fixed);
  }

  puzzle_data.prototype.gtoi = function(g_index) {
    if (g_index < 0) return -1;
    if (g_index >= this.gridarea + this.size) return -1;
    if (g_index >= this.gridarea) return -1;
    if (g_index % 2 == 0) return -1;
    var g_row = Math.floor(g_index / this.gridsize);
    if (g_row % 2 == 0) return -1;
    var g_col = g_index % this.gridsize;
    if (g_row == this.gridsize-1 || g_col == this.gridsize-1) return -1;
    var row = (g_row - 1)/2;
    var col = (g_col - 1)/2;
    return row * this.size + col;
  }

  puzzle_data.prototype.value_at = function(g_index) {
    var index = this.gtoi(g_index);
    if (index == -1) return -1;
    return this.cells[index].get_value();
  }

  puzzle_data.prototype._IGG_getSurrogateView = function(index) {
    var value = index - this.gridarea;
    if (value < 0) {
      value = this.value_at(index);
    }
    return '<span style="font-size:18pt">' + letters[value] + '</span>';
  }

  puzzle_data.prototype._IGG_handleDrag = function(source, target) {
    if (source == -1) return;
    if (source == target) {
      this._IGG_refreshCell(source);
      return;
    }
    if (target == -1) {
      this._IGG_refreshCell(source);
      if (this.value_at(source) == -1) return;
      target = this.value_at(source) + this.gridarea;
    }
    if (source >= this.gridarea) {
      // palette to grid
      if (target >= this.gridarea) {
        this._IGG_refreshCell(source);
        return;
      }
      var digit = source - this.gridarea;
      this.increment_palette(this.value_at(target));
      this.decrement_palette(digit);
      this.cells[this.gtoi(target)].set_value(digit, false);
    } else if (target >= this.gridarea) {
      // grid to palette
      var digit = target - this.gridarea;
      this.increment_palette(digit);
      this.cells[this.gtoi(source)].reset_value();
    } else {
      // grid to grid
      var digit = this.value_at(source);
      this.increment_palette(this.value_at(target));
      this.cells[this.gtoi(source)].reset_value();
      this.cells[this.gtoi(target)].set_value(digit, false);
    }
    grid.refreshDragSources();
    if (this.isSolved()) {
      pref_controller.game_state.puz_solved[this.puznum] = 1;
      this.save_progress();
      pref_controller.updatePrefDisplay();
    }
  }

  puzzle_data.prototype._IGG_isDragSource = function(g_index) {
    if (g_index >= this.gridarea && g_index < this.gridarea + this.size) {
      var digit = g_index - this.gridarea;
      return (this.palette_count.count(digit) != 0);
    }
    var index = this.gtoi(g_index);
    if (index == -1) return false;
    if (this.cells[index].fixed) return false;
    if (this.cells[index].get_value() == -1) return false;
    return true;
  }

  puzzle_data.prototype._IGG_isDragTarget = function(g_index, src) {
    if (g_index >= this.gridarea && g_index < this.gridarea + this.size) {
      var digit = g_index - this.gridarea;
      return (digit == this.value_at(src));
    }
    var index = this.gtoi(g_index);
    if (index == -1) return false;
    if (this.cells[index].fixed) return false;
    return true;
  }

  ///////////////////////////////////////

  var puzzle;
  var grid;
  var pref_controller;
  var pcborder = "#000000";

  _IG_RegisterOnloadHandler(start);
                                                                                                                                                                  
  function start() {
    pref_controller = new _IG_puzzle_pref_controller(__MODULE_ID__, 'puzzle_data_20071015_redux', true);
    pref_controller.num_puzzles = 500;
    pref_controller.box_height = 3;
    pref_controller.box_width = 3;
    pref_controller.rows = 20;
    pref_controller.cols = 25;

    _gel("game_state_html").innerHTML = pref_controller.getTableHTML();
    pref_controller.getPrefs();
                                                                                                                                                                                              
    puzzle = new puzzle_data();
    reset(pref_controller.game_state);

    _IG_AdjustIFrameHeight();
  }

  function reset(game_state) {
    puzzle.resetPuzzle(game_state);
    grid = new _IG_Grid(puzzle, "mygrid", puzzle.gridsize, puzzle.gridsize);
    _gel("table_html").innerHTML = "";
    _gel("table_html").appendChild(grid.getTable());
    grid.getTable().border = 0;
    grid.getTable().cellPadding = 0;
    grid.getTable().cellSpacing = 0;
    make_palette();
    make_boxcode();
    puzzle.set_background_colors();
                                                                                                                                                                 
    grid.dragHandler.topMargin = 0;
    grid.dragHandler.bottomMargin = 30;
    grid.dragHandler.leftMargin = 10;
    grid.dragHandler.rightMargin = 10;
    if (navigator.userAgent.toLowerCase().match("ie")) {
      grid.dragHandler.surrogateOffsetX = -2;
      grid.dragHandler.surrogateOffsetY = 0;
      grid.dragHandler.leftMargin = 10;
      grid.dragHandler.rightMargin = 10;
      grid.dragHandler.topMargin = 10;
      grid.dragHandler.bottomMargin = 10;
    } else if (navigator.userAgent.toLowerCase().match("safari")) {
      grid.dragHandler.surrogateOffsetX = -2;
      grid.dragHandler.surrogateOffsetY = 0;
      grid.dragHandler.leftMargin = 5;
      grid.dragHandler.rightMargin = 10;
      grid.dragHandler.topMargin = 10;
      grid.dragHandler.bottomMargin = 10;
    }
    puzzle._IGG_refreshAll();
    grid.initDragging();
  }

  function make_palette() {
    var palette_table = document.createElement('table');
    palette_table.border = "1";
    palette_table.cellPadding = "3px";
    palette_table.cellSpacing = "0px";
    palette_table.id = "palette_table";
    palette_table.width = "40px";
    var palette = document.createElement('tbody');
    _gel("palette").innerHTML = "";
    _gel("palette").appendChild(palette_table);
    palette_table.appendChild(palette);
    palette.appendChild(document.createElement('tr'));
    for (var digit = 1; digit <= puzzle.size; digit++) {
      var row = document.createElement('tr');
      palette.appendChild(row);
      var tabledata = document.createElement('td');
      row.appendChild(tabledata);
      tabledata.align = "center";
      tabledata.appendChild(grid.getCell(digit - 1 + puzzle.gridarea));
    }
  }

  function make_boxcode() {
    var boxcode_table = document.createElement('table');
    boxcode_table.border = "1";
    boxcode_table.cellPadding = "3px";
    boxcode_table.cellSpacing = "0px";
    boxcode_table.id = "boxcode_table";
    boxcode_table.width = "40px";
    var boxcode = document.createElement('tbody');
    _gel("boxcode").innerHTML = "";
    _gel("boxcode").appendChild(boxcode_table);
    boxcode_table.appendChild(boxcode);
    var row = document.createElement('tr');
    boxcode.appendChild(row);
    for (var digit = 1; digit <= 3; digit++) {
      var tabledata = document.createElement('td');
      row.appendChild(tabledata);
      tabledata.align = "center";
      tabledata.style.backgroundColor = puzzle.colors[digit-1];
      tabledata.appendChild(grid.getCell(digit - 1 + puzzle.size + puzzle.gridarea));
    }
    var row2 = document.createElement('tr');
    boxcode.appendChild(row2);
    for (var digit = 4; digit <= 7; digit++) {
      var tabledata = document.createElement('td');
      row2.appendChild(tabledata);
      tabledata.align = "center";
      tabledata.style.backgroundColor = puzzle.colors[digit-1];
      tabledata.appendChild(grid.getCell(digit - 1 + puzzle.size + puzzle.gridarea));
    }
  }

  _IG_puzzle_pref_controller.prototype.change_level = function(amount) {
    this.nav_puz += amount;
    if (this.nav_puz < 0) this.nav_puz = 0;
    if (this.nav_puz >= this.game_state.puz_count) this.nav_puz = this.game_state.puz_count - 1;
    this.update_navbar();
  }

  _IG_puzzle_pref_controller.prototype.new_puzzle_request = function() {
    this.game_state.cur_puz = this.nav_puz;
    reset(this.game_state);
    this.setPrefs();
    this.update_navbar();
  }

  function dprint(s) {
    _gel("debug1").innerHTML += "DEBUG " + s + "<BR>";
  }

  function clear_board() {
    pref_controller.new_puzzle_request();
  }

  function change_border() {
    if (pcborder == "#000000") {
      pcborder = "#FFFFFF";
    } else {
      pcborder = "#000000";
    }
    pref_controller.new_puzzle_request();
  }

//////////////////////////

// Javascript ends -->
</script>

<font size=-1>

<form style="margin-top:3px;margin-bottom:0px">
Puzzle: <span id="puznum">1</span>
<input style="font-size:10" id="levp1" type="button" value="+" onclick="pref_controller.change_level(1)"/>
<input style="font-size:10" disabled id="levm1" type="button" value="-" onclick="pref_controller.change_level(-1)"/>
<input style="font-size:10" id="levp10" type="button" value="+10" onclick="pref_controller.change_level(10)"/>
<input style="font-size:10" disabled id="levm10" type="button" value="-10" onclick="pref_controller.change_level(-10)"/>
<input style="font-size:10" id="levp50" type="button" value="+50" onclick="pref_controller.change_level(50)"/>
<input style="font-size:10" disabled id="levm50" type="button" value="-50" onclick="pref_controller.change_level(-50)"/>
<input style="font-size:10" id="newp" type="button" disabled value="On Puzzle 1" onclick="pref_controller.new_puzzle_request()"/>
</form>

<b>Udoku</b>: Blech, has it really been four months since the last update?
I've simply been too swamped at work to spend much time with this gadget (working on some secret stuff), so I might as well show you the "Udoku" puzzles I was talking about last time.  These are (still) not standard sudoku puzzles!
<span id="showrules" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline"
   onclick="_gel('rules').style.display='inline';_gel('showrules').style.display='none';_gel('hiderules').style.display='inline'">Rules.</span>
<span id="hiderules" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline;display:none"
   onclick="_gel('rules').style.display='none';_gel('showrules').style.display='inline';_gel('hiderules').style.display='none'">Hide Rules.</span>
<span id="rules" style="display:none;font-size:x-small">
   Place letters into the grid such that each letter appears once in each row, once in each column,
   and at most once in each of the regions.
</span>
<span id="showinstructions" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline"
   onclick="_gel('instructions').style.display='inline';_gel('showinstructions').style.display='none';_gel('hideinstructions').style.display='inline'">How to Play.</span>
<span id="hideinstructions" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline;display:none"
   onclick="_gel('instructions').style.display='none';_gel('showinstructions').style.display='inline';_gel('hideinstructions').style.display='none'">Hide How to Play.</span>
<span id="instructions" style="display:none;font-size:x-small">
   Drag letters from the palette into the grid.  The lights will
   turn <span style="color:#008000">yellow-green</span> or <span style="color:#FF0000">red</span>
   depending on whether that row, column, or region is satisfied.
</span>
<BR>

<table border="0"><tr><td rowspan=2 valign=top>
<span id="palette"></span>
</td><td>
<span id="table_html"></span>
</td><tr><tr><td>
<center>
<table>
<tr><td>
  <input id="resetbutton3" style="font-size:10" type="button" value="Clear"
   onclick="clear_board();">
</td></tr><tr><td>
  <input id="border" style="font-size:9" type="button" value="Borders"
   onclick="change_border();">
</td></tr>
</table>

<!-- <BR>
  <input id="sizechange" style="font-size:10n" type="button" value="Shrink"
   onclick="puzzle__MODULE_ID__.changeSize();"> --->
</center>
</td><td>
<span id="boxcode"></span>
</td></tr></table>

<HR>

<table border=0 cellpadding=3 cellspacing=3><tr><td>
  <center><span id="game_state_html"></span></center>
                                                                                                                                                                                              
</td><td style="font-size:9pt">
  <span id="numsolved">? puzzles</span> solved
</td><td style="font-size:9pt">
<span style="visibility:hidden">
  Your points: <span id="points">?</span>
</span>
  <input id="resetbutton" style="font-size:10;visibility:hidden" type="button" value="Clear Stats"
    onclick="pref_controller.resetPrefs();puzzle.resetPuzzle(pref_controller.game_state);"/>
</td></tr></table>
<span id="win" style="font-size:9pt; font-weight:bold">&nbsp;</span>
                                                                                                                                                                                              
<span id="debug1" style="font-size:8pt;font-weight:bold"></span>
<BR>
<span id="debug2" style="font-size:8pt;font-weight:bold"></span>

<span id="showversion" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline;font-size:x-small"
   onclick="_gel('version').style.display='inline';_gel('showversion').style.display='none';_gel('hideversion').style.display='inline';_IG_AdjustIFrameHeight()">
Version 2.0</span>
<span id="hideversion" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline;display:none;font-size:x-small"
   onclick="_gel('version').style.display='none';_gel('showversion').style.display='inline';_gel('hideversion').style.display='none';_IG_AdjustIFrameHeight()">
Version 2.0</span>
<span id="version" style="display:none;font-size:x-small">
<BR>   v1.0 : initial release.
<BR>   v2.0 : fixed bug where "left" number is incorrect. (0b1010011010).  Also, fixed bug where pink region wasn't checked for correctness.
Incidentally, I've been busy writing a game using the <a href="http://code.google.com/apis/opensocial/">OpenSocial API</a>; that's why I'm so busy now.
</span>

</FONT>

  ]]> 

  </Content>
</Module>


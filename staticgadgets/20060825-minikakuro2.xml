<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
    title="Wei-Hwa's Puzzle: 2006-08-25"
    description="Regular Puzzle Challenges from a Google Engineer"
    author="Wei-Hwa Huang and others"
    author_email="weihwa.feedback+ig20060825@gmail.com"
    author_link="http://weihwa.feedback.googlepages.com/home"
    title_url="http://weihwa.feedback.googlepages.com/home"
    author_location="Mountain View, CA, USA"
    author_affiliation="Google, Inc."
    screenshot="http://weihwa.feedback.googlepages.com/screenshot.png"
    thumbnail="http://weihwa.feedback.googlepages.com/thumbnail.png"
    height="420"
    render_inline="optional"
  />
  <Content type="html">

<![CDATA[

<style> 
body,td,a,p,.h{font-family:arial,sans-serif;}
</style>

<span id="debug" style="font-size:16pt;font-weight:bold"></span>

<div style="position:relative;float:right;margin-left:2px;margin-right:0px;margin-top:2px;margin-bottom:0px;">
<A TARGET="_top" HREF="http://weihwa.feedback.googlepages.com/home"><IMG SRC="http://weihwa-puzzles.appspot.com/images/home.png"
     STYLE="border:0px"
     ALT="Puzzle Homepage: Play previous puzzles!"
     TITLE="Puzzle Homepage: Play previous puzzles!"
></A><A HREF="mailto:weihwa.feedback+20060817@gmail.com"><IMG SRC="http://weihwa-puzzles.appspot.com/images/mail.png"
     STYLE="border:0px"
     ALT="Click here to send feedback"
     TITLE="Click here to send feedback"
></A>
</div>

<script type="text/javascript" src="http://weihwa.feedback.googlepages.com/puzzle-utils.js"></script>

<script type="text/javascript">
<!-- Javascript begins

  // Copyright 2006 Google, Inc.
  // Author: Wei-Hwa Huang

  Drag.min_x = 15;
  Drag.min_y = 20;
  Drag.max_x = 10;
  Drag.max_y = 20;
  Drag.basis_offset_y = 3;
  Drag.basis_offset_x = 0;
  if (navigator.userAgent.toLowerCase().match("msie")) {
    Drag.basis_offset_y = 0;
    Drag.basis_offset_x = -3;
    Drag.min_x = 15;
    Drag.max_x = 10;
    Drag.min_y = 20;
    Drag.max_y = 20;
  }

  ///////////////////////////////////////////////

  function kakuro_cell__MODULE_ID__(id, max_value) {
    this.id = id;
    this.max_value = max_value;
    this.fixed = false;
    this.value = -1;
    this.regions = new Array();

    this.friend_values = new Multiset();
  }

  kakuro_cell__MODULE_ID__.prototype.add_region = function (region) {
    this.regions.push(region);
  }

  kakuro_cell__MODULE_ID__.prototype.get_value = function () {
    return this.value;
  }

  kakuro_cell__MODULE_ID__.prototype.allows = function (value) {
    return (!this.friend_values.has(value));
  }

  kakuro_cell__MODULE_ID__.prototype.allowed_values = function () {
    var answer = "";
    for (var i=1; i<=this.max_value; ++i) {
      if (!this.friend_values.has(i)) {
        answer += "" + i;
      }
    }
    return answer;
  }

  kakuro_cell__MODULE_ID__.prototype.add_placed = function (value, src_id) {
    if (src_id == this.id) return;
    var change_happening = (!this.friend_values.has(value));
    this.friend_values.add(value);
    if (change_happening)
      this.changed(this.id);
  }

  kakuro_cell__MODULE_ID__.prototype.remove_placed = function (value, src_id) {
    if (src_id == this.id) return;
    var change_happening = (this.friend_values.count(value) == 1);
    this.friend_values.remove(value);
    if (change_happening)
      this.changed(this.id);
  }

  kakuro_cell__MODULE_ID__.prototype.set_value = function (value, fixed) {
    for (var i = 0; i < this.regions.length; ++i) {
      this.regions[i].remove_placed(this.value, this.id);
      this.regions[i].add_placed(value, this.id);
    }
    this.fixed = fixed;
    this.value = value;
    this.changed(this.id);
  }

  kakuro_cell__MODULE_ID__.prototype.reset_value = function () {
    for (var i = 0; i < this.regions.length; ++i) {
      this.regions[i].remove_placed(this.value, this.id);
    }
    this.value = -1;
    this.changed(this.id);
  }

  kakuro_cell__MODULE_ID__.prototype.changed = function (id) {
    // callback -- indicates cell change.
  }

  function kakuro_region__MODULE_ID__(id, sum, max_value) {
    this.id = id;
    this.sum = sum;
    this.max_value = max_value;
    this.len = 0;
    this.placed_count = 0;
    this.cells = new Array();
    this.placed = new Multiset();
    this.cur_sum = 0;
  }

  kakuro_region__MODULE_ID__.prototype.add_cell = function (cell) {
    this.cells.push(cell);
    this.len++;
  }

  kakuro_region__MODULE_ID__.prototype.add_placed = function (value, src_id) {
    if (value != -1) {
      this.placed.add(value);
      this.cur_sum += value;
      this.placed_count++;
      for (var i = 0; i < this.cells.length; ++i) {
        if (this.cells[i].id != src_id) {  // this check isn't really necessary but it pays to be paranoid.
          this.cells[i].add_placed(value, src_id);
        }
      }
      this.changed(this.id);
    }
  }

  kakuro_region__MODULE_ID__.prototype.has_dupes = function (cell) {
    return this.placed.has_dupes();
  }

  kakuro_region__MODULE_ID__.prototype.satisfied = function (cell) {
    return ((this.cur_sum == this.sum) && (!this.placed.has_dupes()) && (this.placed_count == this.len));
  }

  kakuro_region__MODULE_ID__.prototype.filled_but_wrong = function (cell) {
    return ((this.cur_sum != this.sum) && (!this.placed.has_dupes()) && (this.placed_count == this.len));
  }

  kakuro_region__MODULE_ID__.prototype.allowed_values = function (cell) {
    var answer = "";
    for (var i=1; i<=this.max_value; ++i) {
      if (!this.placed.has(i)) {
        answer += i;
      }
    }
    return answer;
  }

  kakuro_region__MODULE_ID__.prototype.remove_placed = function (value, src_id) {
    if (value != -1) {
      this.placed.remove(value);
      this.cur_sum -= value;
      this.placed_count--;
      for (var i = 0; i < this.cells.length; ++i) {
        if (this.cells[i].id != src_id) {  // this check isn't really necessary but it pays to be paranoid.
          this.cells[i].remove_placed(value, src_id);
        }
      }
      this.changed(this.id);
    }
  }

  kakuro_region__MODULE_ID__.prototype.changed = function (id) {
    // callback -- indicates region change.
  }

  ////////////////////////////////////////////////////////

  function puzzle_data__MODULE_ID__() {
    this.reset_puzzle(0);
  }

  puzzle_data__MODULE_ID__.prototype.reset_puzzle = function(index) {
    this.x = -1;  // generic "unused" value.
    var x = this.x;

    if (index == 1) {
      this.height = 6;
      this.width = 6;
      this.max_val = 5;
      this.max_dup = 5;
      this.is_cell = new Array(
        0,0,0,0,0,0,0,
        0,0,1,1,1,0,0,
        0,1,1,1,1,0,0,
        0,1,1,0,1,1,1,
        0,1,1,1,0,1,1,
        0,0,0,1,1,1,1,
        0,0,0,1,1,1,0
      );
      this.a_id = new Array(
        x,x,x,x,x,x,x,
        x,x,0,0,0,x,x,
        x,1,1,1,1,x,x,
        x,2,2,x,3,3,3,
        x,4,4,4,x,5,5,
        x,x,x,6,6,6,6,
        x,x,x,7,7,7,x
      );
      this.d_id = new Array(
        x,x,x,x,x,x,x,
        x,x,1,2,4,x,x,
        x,0,1,2,4,x,x,
        x,0,1,x,4,6,7,
        x,0,1,3,x,6,7,
        x,x,x,3,5,6,7,
        x,x,x,3,5,6,x
      );
      this.a_sum = new Array(10,14,4,10,12,6,12,6);
      this.d_sum = new Array(9,11,7,10,9,6,12,10);
    } else if (index == 0) {
      this.height = 7;
      this.width = 6;
      this.max_val = 5;
      this.max_dup = 5;
      this.is_cell = new Array(
        0,0,0,0,0,0,0,
        0,0,1,1,0,0,0,
        0,1,1,1,1,1,0,
        0,1,1,0,1,1,0,
        0,0,0,1,1,0,0,
        0,0,1,1,0,1,1,
        0,0,1,1,1,1,1,
        0,0,0,0,1,1,0
      );
      this.a_id = new Array(
        x,x,x,x,x,x,x,
        x,x,0,0,x,x,x,
        x,1,1,1,1,1,x,
        x,2,2,x,3,3,x,
        x,x,x,4,4,x,x,
        x,x,5,5,x,6,6,
        x,x,7,7,7,7,7,
        x,x,x,x,8,8,x
      );
      this.d_id = new Array(
        x,x,x,x,x,x,x,
        x,x,1,3,x,x,x,
        x,0,1,3,5,7,x,
        x,0,1,x,5,7,x,
        x,x,x,4,5,x,x,
        x,x,2,4,x,8,9,
        x,x,2,4,6,8,9,
        x,x,x,x,6,8,x
      );
      this.a_sum = new Array(7,15,8,8,5,4,6,15,3);
      this.d_sum = new Array(8,12,5,3,9,11,3,8,9,3);
    } else if (index == 2) {
      this.height = 6;
      this.width = 6;
      this.max_val = 5;
      this.max_dup = 5;
      this.is_cell = new Array(
        0,0,0,0,0,0,0,
        0,1,1,0,1,1,0,
        0,1,1,1,1,1,0,
        0,0,1,1,1,0,0,
        0,0,0,1,1,1,0,
        0,0,1,1,1,1,1,
        0,0,1,1,0,1,1
      );
      this.a_id = new Array(
        x,x,x,x,x,x,x,
        x,0,0,x,1,1,x,
        x,2,2,2,2,2,x,
        x,x,3,3,3,x,x,
        x,x,x,4,4,4,x,
        x,x,5,5,5,5,5,
        x,x,6,6,x,7,7
      );
      this.d_id = new Array(
        x,x,x,x,x,x,x,
        x,0,1,x,4,5,x,
        x,0,1,3,4,5,x,
        x,x,1,3,4,x,x,
        x,x,x,3,4,6,x,
        x,x,2,3,4,6,7,
        x,x,2,3,x,6,7
      );
      this.a_sum = new Array(6,4,15,10,12,15,9,3);
      this.d_sum = new Array(7,9,6,15,15,6,10,6);
    } else if (index == 3) {
      this.height = 9;
      this.width = 8;
      this.max_val = 6;
      this.max_dup = 6;
      this.is_cell = new Array(
        0,0,0,0,0,0,0,0,0,
        0,0,0,0,1,1,0,0,0,
        0,0,0,1,1,1,1,0,0,
        0,0,1,1,0,0,1,1,0,
        0,1,1,0,0,1,1,1,0,
        0,1,1,0,1,1,0,1,1,
        0,0,1,1,1,0,0,1,1,
        0,0,1,1,0,0,1,1,0,
        0,0,0,1,1,1,1,0,0,
        0,0,0,0,1,1,0,0,0
      );
      this.a_id = new Array(
        x,x,x,x,x,x,x,x,x,
        x,x,x,x,0,0,x,x,x,
        x,x,x,1,1,1,1,x,x,
        x,x,2,2,x,x,3,3,x,
        x,4,4,x,x,5,5,5,x,
        x,6,6,x,7,7,x,8,8,
        x,x,9,9,9,x,x,10,10,
        x,x,11,11,x,x,12,12,x,
        x,x,x,13,13,13,13,x,x,
        x,x,x,x,14,14,x,x,x
      );
      this.d_id = new Array(
        x,x,x,x,x,x,x,x,x,
        x,x,x,x,4,7,x,x,x,
        x,x,x,2,4,7,10,x,x,
        x,x,1,2,x,x,10,12,x,
        x,0,1,x,x,8,10,12,x,
        x,0,1,x,5,8,x,12,13,
        x,x,1,3,5,x,x,12,13,
        x,x,1,3,x,x,11,12,x,
        x,x,x,3,6,9,11,x,x,
        x,x,x,x,6,9,x,x,x
      );
      this.a_sum = new Array(5,15,7,5,7,13,5,10,6,12,11,7,8,11,4);
      this.d_sum = new Array(7,15,10,12,5,5,8,6,8,3,12,8,17,10);
    } else if (index == 4) {
      this.height = 8;
      this.width = 8;
      this.max_val = 6;
      this.max_dup = 6;
      this.is_cell = new Array(
        0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,1,1,0,0,
        0,0,0,1,1,1,1,1,1,
        0,0,1,1,1,1,0,1,1,
        0,0,1,1,0,1,1,0,0,
        0,0,0,1,1,0,1,1,0,
        0,1,1,0,1,1,1,1,0,
        0,1,1,1,1,1,1,0,0,
        0,0,0,1,1,0,0,0,0
      );
      this.a_id = new Array(
        x,x,x,x,x,x,x,x,x,
        x,x,x,x,x,0,0,x,x,
        x,x,x,1,1,1,1,1,1,
        x,x,2,2,2,2,x,3,3,
        x,x,4,4,x,5,5,x,x,
        x,x,x,6,6,x,7,7,x,
        x,8,8,x,9,9,9,9,x,
        x,10,10,10,10,10,10,x,x,
        x,x,x,11,11,x,x,x,x
      );
      this.d_id = new Array(
        x,x,x,x,x,x,x,x,x,
        x,x,x,x,x,7,9,x,x,
        x,x,x,3,5,7,9,11,13,
        x,x,1,3,5,7,x,11,13,
        x,x,1,3,x,7,10,x,x,
        x,x,x,3,6,x,10,12,x,
        x,0,2,x,6,8,10,12,x,
        x,0,2,4,6,8,10,x,x,
        x,x,x,4,6,x,x,x,x
      );
      this.a_sum = new Array(3,21,17,7,7,6,8,4,8,13,21,11);
      this.d_sum = new Array(9,11,7,12,9,7,16,10,4,6,12,6,8,9);
    } else if (index == 5) {
      this.height = 8;
      this.width = 7;
      this.max_val = 6;
      this.max_dup = 6;
      this.is_cell = new Array(
        0,0,0,0,0,0,0,0,
        0,1,1,0,0,1,1,0,
        0,1,1,1,1,1,1,0,
        0,0,0,1,1,0,1,1,
        0,0,1,1,0,0,1,1,
        0,1,1,0,0,1,1,0,
        0,1,1,0,1,1,0,0,
        0,0,1,1,1,1,1,1,
        0,0,1,1,0,0,1,1
      );
      this.a_id = new Array(
        x,x,x,x,x,x,x,x,
        x,0,0,x,x,1,1,x,
        x,2,2,2,2,2,2,x,
        x,x,x,3,3,x,4,4,
        x,x,5,5,x,x,6,6,
        x,7,7,x,x,8,8,x,
        x,9,9,x,10,10,x,x,
        x,x,11,11,11,11,11,11,
        x,x,12,12,x,x,13,13
      );
      this.d_id = new Array(
        x,x,x,x,x,x,x,x,
        x,0,2,x,x,8,10,x,
        x,0,2,4,6,8,10,x,
        x,x,x,4,6,x,10,12,
        x,x,3,4,x,x,10,12,
        x,1,3,x,x,9,10,x,
        x,1,3,x,7,9,x,x,
        x,x,3,5,7,9,11,13,
        x,x,3,5,x,x,11,13
      );
      this.a_sum = new Array(10,3,21,6,9,6,4,9,6,7,10,21,7,7);
      this.d_sum = new Array(9,9,5,20,10,8,7,9,3,12,15,3,9,7);
    }

    // Now, stuff that's global to all puzzles.
    this.area = (this.width+1) * (this.height+1);
    this.cells = new Array(this.area);  // the top row and left column are unused, e.g.
    for (var i=0;i<this.area;++i) {
      this.cells[i] = new kakuro_cell__MODULE_ID__(i, this.max_val);
    }

    this.a_count = this.a_sum.length;
    this.d_count = this.d_sum.length;
    this.a_label = new Array(this.area);
    this.d_label = new Array(this.area);
    for (var i=this.area-1;i>=0;--i) {
      this.a_label[i] = x;
      this.d_label[i] = x;
    }
    for (var i=this.area-1;i>=0;--i) {
      if (this.a_id[i] != x) {
        this.a_label[i] = x;
        this.a_label[i-1] = this.a_id[i];
      }
      if (this.d_id[i] != x) {
        this.d_label[i] = x;
        this.d_label[i-(this.width+1)] = this.d_id[i];
      }
    }

    this.a_positions = new Array(this.a_count);
    this.d_positions = new Array(this.d_count);
    for (var i=0;i<this.area-1;++i) {
      if (this.a_label[i] != x) {
        this.a_positions[this.a_label[i]] = i;
      }
      if (this.d_label[i] != x) {
        this.d_positions[this.d_label[i]] = i;
      }
    }

    this.a_regions = new Array(this.a_count);  
    this.d_regions = new Array(this.d_count);  
    for (var i=0;i<this.a_count;++i) {
      this.a_regions[i] = new kakuro_region__MODULE_ID__(i, this.a_sum[i], this.max_val);
    }
    for (var i=0;i<this.d_count;++i) {
      this.d_regions[i] = new kakuro_region__MODULE_ID__(i, this.d_sum[i], this.max_val);
    }
    for (var i=0;i<this.area;++i) {
      if (this.a_id[i] != x) {
        this.cells[i].add_region(this.a_regions[this.a_id[i]]);
        this.a_regions[this.a_id[i]].add_cell(this.cells[i]);
      }
      if (this.d_id[i] != x) {
        this.cells[i].add_region(this.d_regions[this.d_id[i]]);
        this.d_regions[this.d_id[i]].add_cell(this.cells[i]);
      }
    }

    this.palette_count = new Multiset();
    for (var val = 1; val <= this.max_val; ++val) {
      for (var dup = 0; dup < this.max_dup; ++dup) {
        this.palette_count.add(val);
      }
    }

    this.yank_value = -1;
    this.deregister_after_place = -1;

    // define callbacks.
    var puzzle = this;

    puzzle.cell_changed_callback = function (index) {
      puzzle.cell_changed(index);
    }
    for (var i=0;i<this.area;++i) {
      this.cells[i].changed = this.cell_changed_callback;
    }

    puzzle.a_region_changed_callback = function (index) {
      puzzle.cell_changed(puzzle.a_positions[index]);
    }
    puzzle.d_region_changed_callback = function (index) {
      puzzle.cell_changed(puzzle.d_positions[index]);
    }
    for (var i=0;i<this.a_count;++i) {
      this.a_regions[i].changed = this.a_region_changed_callback;
    }
    for (var i=0;i<this.d_count;++i) {
      this.d_regions[i].changed = this.d_region_changed_callback;
    }
    this.cursor_pos = -1;
  }

  // fixes a position.  Not actually used.
  puzzle_data__MODULE_ID__.prototype.affix = function (index, value) {
    this.cells[index].set_value(value, true);
    this.palette_count.remove(value);
  }

  puzzle_data__MODULE_ID__.prototype.increment_palette = function (id) {
    if (id == -1) return;
    this.palette_count.add(id);
    if (this.palette_count.count(id) == 1) {
      this.register(id + this.area);
    }
    this.cell_changed(id + this.area);
  }
 
  puzzle_data__MODULE_ID__.prototype.decrement_palette = function (id) {
    this.palette_count.remove(id);
    if (!this.palette_count.has(id)) {
      this.deregister_after_place = id + this.area;
    }
    this.cell_changed(id + this.area);
  }

  puzzle_data__MODULE_ID__.prototype.handle_click = function (src) {
    if (this.cursor_pos == src) {
      this.move_cursor(-1);
    } else if (this.is_cell[src]) {
      this.move_cursor(src);
    }
  }

  puzzle_data__MODULE_ID__.prototype.yank = function (src) {
    if (src >= this.area) {
      var true_val = src - this.area;
      this.yank_value = true_val;
      this.decrement_palette(src - this.area); 
    } else {
      this.yank_value = this.cells[src].value;
      this.deregister_after_place = src;
      this.cells[src].reset_value();
      this.cell_changed(src);
    }
  }

  puzzle_data__MODULE_ID__.prototype.place = function (dest) {
    if (dest == -1) {
      if (dest != this.yanked && this.cursor_pos != -1) {
        var old_cursor_pos = this.cursor_pos;
        this.cursor_pos = -1;
        this.cell_changed(old_cursor_pos);
      }
      // dropped to nowhere (palette)
      this.increment_palette(this.yank_value);
    } else {
      this.increment_palette(this.cells[dest].value);
      this.cells[dest].set_value(this.yank_value, false);
      this.register(dest);
    }
    if (this.deregister_after_place != -1) {
      if (this.deregister_after_place != dest)
        this.deregister(this.deregister_after_place);
      this.deregister_after_place = -1;
    }
    this.yank_value = -1;
  }

  puzzle_data__MODULE_ID__.prototype.deregister = function(index) {
    // callback -- deregisters a cell.
  }

  puzzle_data__MODULE_ID__.prototype.register = function(index) {
    // callback -- registers a cell.
  }

  puzzle_data__MODULE_ID__.prototype.cell_changed = function(index) {
    // callback -- modifies a cell.
  }

  puzzle_data__MODULE_ID__.prototype.region_changed = function(index) {
    // callback -- modifies a region indicator.
  }

  puzzle_data__MODULE_ID__.prototype.move_cursor = function(dst) {
    var old_cursor_pos = this.cursor_pos;
    this.cursor_pos = dst;
    this.cell_changed(old_cursor_pos);
    this.cell_changed(this.cursor_pos);
  }
                                                                                                                                                                                                                                 
  puzzle_data__MODULE_ID__.prototype.move_cursor_dir = function(dir) {
    // 0 = up, 1 = right, 2 = down, 3 = left.
    if (this.cursor_pos == -1) return;

    var candidate;
    if (dir % 4 == 0) {
      candidate = this.cursor_pos - this.width - 1;
    } else if (dir % 4 == 1) {
      candidate = this.cursor_pos + 1;
    } else if (dir % 4 == 2) {
      candidate = this.cursor_pos + this.width + 1;
    } else if (dir % 4 == 3) {
      candidate = this.cursor_pos - 1;
    } else {
      return;
    }

    if (candidate < 0) return;
    if (candidate >= this.area) return;
    if (this.is_cell[candidate] == 0) return;

    this.move_cursor(candidate);
  }

  puzzle_data__MODULE_ID__.prototype.process_key_press = function(keynum, keychar) {
    if (keynum == 38 || keynum == 104) {
      this.move_cursor_dir(0);
      return;
    }
    if (keynum == 39 || keynum == 102) {
      this.move_cursor_dir(1);
      return;
    }
    if (keynum == 40 || keynum == 98) {
      this.move_cursor_dir(2);
      return;
    }
    if (keynum == 37 || keynum == 100) {
      this.move_cursor_dir(3);
      return;
    }
    if (keynum == 46 || keychar == " " || keychar == "0") {
      var oldpos = this.cursor_pos;
      this.yank(this.cursor_pos); this.place(-1);
      this.move_cursor(oldpos);
      return;
    }
    for (var key = 1; key <= this.max_val; key++) {
      if (keychar == key && this.palette_count.has(keychar)) {
        this.yank(this.area + key); this.place(this.cursor_pos);
        return;
      }
    }
  }

  puzzle_data__MODULE_ID__.prototype.reregister = function() {
    for (var i=0; i<this.area; ++i) {
      if (this.is_cell[i] != this.x) {
        this.register(i);
      } else {
        this.deregister(i);
      }
    }
    for (var i=1; i<=this.max_val; ++i) {
      this.register(i+this.area);
    }
  }

  puzzle_data__MODULE_ID__.prototype.handle_click = function (src) {
    if (this.cursor_pos == src) {
      this.move_cursor(-1);
    } else {
      this.move_cursor(src);
    }
  }

  puzzle_data__MODULE_ID__.prototype.get_a_region_text = function(index) {
    var a_id = this.a_label[index];
    var answer = "";
    answer += '<span style="color:#FFFFFF" title="';
    answer += "Sum: " + this.a_regions[a_id].cur_sum + " ";
    if (this.a_regions[a_id].satisfied()) {
      answer += "Sum satisfied";
    } else if (this.a_regions[a_id].has_dupes()) {
      answer += "Error: duplicate digit";
    } else if (this.a_regions[a_id].filled_but_wrong()) {
      answer += "Error: sum incorrect";
    } else {
      answer += "Possible digits: " + this.a_regions[a_id].allowed_values();
    }
    answer += '">';
    answer += this.a_sum[a_id];
    answer += '</span>';
    return answer;
  }

  puzzle_data__MODULE_ID__.prototype.get_d_region_text = function(index) {
    var d_id = this.d_label[index];
    var answer = "";
    answer += '<span style="color:#FFFFFF" title="';
    answer += "Sum: " + this.d_regions[d_id].cur_sum + " ";
    if (this.d_regions[d_id].satisfied()) {
      answer += "Sum satisfied";
    } else if (this.d_regions[d_id].has_dupes()) {
      answer += "Error: duplicate digit";
    } else if (this.d_regions[d_id].filled_but_wrong()) {
      answer += "Error: sum incorrect";
    } else {
      answer += "Possible digits: " + this.d_regions[d_id].allowed_values();
    }
    answer += '">&nbsp;';
    answer += this.d_sum[d_id];
    answer += '</span>'
    return answer;
  }

  puzzle_data__MODULE_ID__.prototype.get_background_image = function(index) {
    var answer = "http://weihwa-puzzles.appspot.com/images/";
    if (this.a_label[index] == this.x) {
      answer += 'black';
    } else if (this.a_regions[this.a_label[index]].satisfied()) {
      answer += 'green';
    } else if (this.a_regions[this.a_label[index]].filled_but_wrong()) {
      answer += 'red';
    } else if (this.a_regions[this.a_label[index]].has_dupes()) {
      answer += 'red';
    } else {
      answer += 'black';
    }
    answer += '-';
    if (this.d_label[index] == this.x) {
      answer += 'black';
    } else if (this.d_regions[this.d_label[index]].satisfied()) {
      answer += 'green';
    } else if (this.d_regions[this.d_label[index]].filled_but_wrong()) {
      answer += 'red';
    } else if (this.d_regions[this.d_label[index]].has_dupes()) {
      answer += 'red';
    } else {
      answer += 'black';
    }
    answer += '.png';
    return answer;
  }

  // actions.
  puzzle_data__MODULE_ID__.prototype.get_text = function (index) {
    if (index >= this.area) {
      var answer = "";
      var true_val = index - this.area;
      if (!this.palette_count.has(true_val)) {
        answer += '<span style="cursor:default;font-size:16pt;color:#FFFFFF" title="' + true_val + ' (0 left)">';
        answer += true_val;
        answer += '<br><div style="align:center;font-size:7pt">(gone)</div>';
      } else {
        answer += '<span style="cursor:pointer;cursor:hand;font-size:16pt" title="' + true_val + ' (' + this.palette_count.count(true_val) + ' left)">'
        answer += true_val;
        answer += '<br><div style="align:center;font-size:7pt">(' + this.palette_count.count(true_val) + ' left)</div>';
      }
      answer += '</span>';
      return answer;
      return '<span style="cursor:pointer;cursor:hand;font-size:16pt" title="' + true_val + ' (' + this.palette_count.count(true_val) + ' left)">' + true_val + '</span>'
    }

    if (this.is_cell[index] != 0) {
      var bgcolor = (index == this.cursor_pos) ? 'background-color:#CCCCCC;' : '';
      if (this.cells[index].get_value() == -1) {
        var allowed = this.cells[index].allowed_values();
        var title = (allowed == "") ? "No values possible!" : ("Could be: " + allowed);
        return '<div title="' + title + '" style="' + bgcolor + 'cursor:pointer;cursor:hand;font-size:16pt;color:#FFFFFF" onclick="game__MODULE_ID__.action_handle_click(' + index + ')">?</div>';
      }
      var bold = (this.cells[index].fixed) ? ";font-weight:bold" : "";
      var cursor = ";cursor:pointer;cursor:hand";
      var title = "Placed by you";
      return '<div title="' + title + '" style="' + bgcolor + 'text-align:center' + cursor + ';font-size:16pt' + bold + '" onclick="game__MODULE_ID__.action_handle_click(' + index + ')">' + this.cells[index].get_value() + '</div>';
    }

    var answer = '<div style="background-image:url(' + this.get_background_image(index) + ')">';

    answer += '<table border=0 cellpadding="0px" cellspacing="0px" width="24px">';
    answer += "<tr><td></td><td colspan=2 align=right>";
    answer += '<span style="cursor:default;font-size:8pt">';
    answer += (this.a_label[index] == this.x) ? "?" : this.get_a_region_text(index);
    answer += '</span>';
    answer += "</td></tr><tr><td colspan=2 align=left>";
    answer += '<span style="cursor:default;font-size:8pt">';
    answer += (this.d_label[index] == this.x) ? "?" : this.get_d_region_text(index);
    answer += '</span>';
    answer += "</td><td></td></tr>";
    answer += "</table>";

    answer += "</div>";
    return answer;

  }

  puzzle_data__MODULE_ID__.prototype.get_shadow_text = function () {
    return '<span title="" style="text-align:center;cursor:pointer;cursor:hand;font-size:16pt;font-weight:bold;color:#C0C0C0">' + this.yank_value + '</span>';
  }

  puzzle_data__MODULE_ID__.prototype.get_red_shadow_text = function () {
    return '<span title="" style="text-align:center;cursor:pointer;cursor:hand;font-size:16pt;font-weight:bold;color:#C00000">' + this.yank_value + '</span>';
  }

  ///////////////////////////////////////////////
  ///  This code defines the "front end".
  ///  Encodes the user's current "state".

  function game_setup__MODULE_ID__() {
    var game_setup = this;

    game_setup.puzzle = new puzzle_data__MODULE_ID__();

    game_setup.height = game_setup.puzzle.height+1;
    game_setup.width = game_setup.puzzle.width+1;
    game_setup.palette_offset = game_setup.puzzle.area;

    game_setup.source = 0;
    game_setup.sink = 0;

    // define callbacks.
    game_setup.refresh = function (index) {
      if (index != -1)
        _gel(game_setup.get_cell_id(index)).innerHTML = game_setup.get_value_at(index);
    }
    game_setup.puzzle.cell_changed = this.refresh;

    game_setup.deregister = function (index) {
      Drag.remove_source(game_setup.get_cell_id(index), _gel(game_setup.get_cell_id(index)));
    }
    game_setup.puzzle.deregister = this.deregister;

    game_setup.register = function (index) {
      Drag.add_source(game_setup.get_cell_id(index), _gel(game_setup.get_cell_id(index)));
    }
    game_setup.puzzle.register = this.register;
  }

  game_setup__MODULE_ID__.prototype.get_cell_id = function (index) {
    return ('cell_' + index + '___MODULE_ID__');
  }

  game_setup__MODULE_ID__.prototype.value_from_id = function (id) {
    var regexp = /cell_(.*)___MODULE_ID__/;
    var matches = regexp.exec(id);
    return matches[1];
  }

  game_setup__MODULE_ID__.prototype.get_value_at = function (index) {
    if (Drag.is_dragging && this.sink == index) {
      if (this.puzzle.cells[index].allows(this.puzzle.yank_value)) {
        return this.puzzle.get_shadow_text();
      } else {
        return this.puzzle.get_red_shadow_text();
      }
    } else {
      return this.puzzle.get_text(index);
    }
  }

  game_setup__MODULE_ID__.prototype.table_html = function() {
    var result = "";
    result += '<table border="0"><tr><td valign=top>';

    result += '<table border="1" cellpadding="3px" cellspacing="0px" width="40px">';
    for (var row = 1; row <= this.puzzle.max_val; ++row) {
      result += '<tr><td align="center"><span id="' + game__MODULE_ID__.get_cell_id(row + this.palette_offset) + '">';
      result += game__MODULE_ID__.get_value_at(row + this.palette_offset);
      result += '</span>';
      result += '</td></tr>'; 
    }
    result += '</table> ';

    result += '</td><td>';

    result += '<table border="1" cellpadding="1px" cellspacing="0px">';
    for (var row = 0; row < game__MODULE_ID__.height; ++row) {
      result += '<tr>';
      for (var col = 0; col < game__MODULE_ID__.width; ++col) {
        result += '<td align="center">';
        result += '<span id="' + game__MODULE_ID__.get_cell_id(row * game__MODULE_ID__.width + col) + '">';
        result += game__MODULE_ID__.get_value_at(row * game__MODULE_ID__.width + col);
        result += '</span>';
        result += '</td>';
      }
      result += '</tr>';
    }
  
    result += '</table>';

    result += '</td></tr>';

    result += '</table>';

    return result;
  }

  game_setup__MODULE_ID__.prototype.refresh_all = function (index) {
    for (var i=0; i<this.palette_offset; i++) {
      this.refresh(i);
    }
    for (var i=1; i<=this.puzzle.max_val; i++) {
      this.refresh(i+this.palette_offset);
    }
  }

  ////////////////////////////////////////////////////
  // UI actions.

  game_setup__MODULE_ID__.prototype.action_dragging_started = function (index) {
    this.puzzle.yank(index);
  }

  game_setup__MODULE_ID__.prototype.action_hit_sink = function (index) {
    var last_sink = this.sink;
    this.sink = index;
    this.refresh(last_sink);
    this.refresh(index);
  }

  game_setup__MODULE_ID__.prototype.action_lost_sink = function () {
    var last_sink = this.sink;
    this.sink = -1;
    this.refresh(last_sink);
  }

  game_setup__MODULE_ID__.prototype.action_dragging_ended = function (index) {
    var last_sink = this.sink;
    this.puzzle.place(this.sink);
    this.sink = -1;
    this.refresh(last_sink);
  }

  game_setup__MODULE_ID__.prototype.action_reset_puzzle = function(puznum) {
    this.puzzle.reset_puzzle(puznum);
    this.height = this.puzzle.height+1;
    this.width = this.puzzle.width+1;
    this.palette_offset = this.puzzle.area;
    _gel("gameboard__MODULE_ID__").innerHTML = this.table_html();
    this.puzzle.reregister();
    init_dragging__MODULE_ID__();
    this.refresh_all();
  }

  game_setup__MODULE_ID__.prototype.action_handle_click = function (index) {
    this.puzzle.handle_click(index);
  }

  ////////////////////////////////////////////////////
  // Dragging callback overrides.

  Drag.dragging_started = function (object) {
    game__MODULE_ID__.action_dragging_started(game__MODULE_ID__.value_from_id(object.id));
  }

  Drag.hit_sink = function (object) {
    game__MODULE_ID__.action_hit_sink(game__MODULE_ID__.value_from_id(object.id));
  }

  Drag.lost_sink = function () {
    game__MODULE_ID__.action_lost_sink();
  }

  Drag.dragging_ended = function (object) {
    game__MODULE_ID__.action_dragging_ended(game__MODULE_ID__.value_from_id(object.id));
  }


  ///////////////////////////////////////
  // Direct access functions.
  
  var game__MODULE_ID__ = new game_setup__MODULE_ID__();

  function table_html__MODULE_ID__() {
    var result = "";

    result += '<span id="gameboard__MODULE_ID__">';
    result += game__MODULE_ID__.table_html();
    result += '</span>';

    return result;
  }


  function init_dragging__MODULE_ID__() {
    Drag.set_basis(_gel("dummy"));

    // This section is wonky because the function can't handle variables.
    if (game__MODULE_ID__.puzzle.max_val >= 1)
      _gel(game__MODULE_ID__.get_cell_id(1 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 1 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 2)
      _gel(game__MODULE_ID__.get_cell_id(2 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 2 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 3)
      _gel(game__MODULE_ID__.get_cell_id(3 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 3 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 4)
      _gel(game__MODULE_ID__.get_cell_id(4 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 4 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 5)
      _gel(game__MODULE_ID__.get_cell_id(5 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 5 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 6)
      _gel(game__MODULE_ID__.get_cell_id(6 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 6 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 7)
      _gel(game__MODULE_ID__.get_cell_id(7 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 7 + '</span>'; }
    if (game__MODULE_ID__.puzzle.max_val >= 8)
      _gel(game__MODULE_ID__.get_cell_id(8 + game__MODULE_ID__.palette_offset)).basis_view = function () { return '<span style="cursor:pointer;cursor:hand;font-size:16pt">' + 8 + '</span>'; }

    for (var i = 1; i <= game__MODULE_ID__.puzzle.max_val; ++i) {
      Drag.add_source(game__MODULE_ID__.get_cell_id(i + game__MODULE_ID__.palette_offset), _gel(game__MODULE_ID__.get_cell_id(i + game__MODULE_ID__.palette_offset)));
    }
    Drag.clear_sinks();
    for (var row = 0; row < game__MODULE_ID__.height; ++row) {
      for (var col = 0; col < game__MODULE_ID__.width; ++col) {
        if (game__MODULE_ID__.puzzle.is_cell[row * game__MODULE_ID__.width + col] == 1)
          Drag.add_sink(game__MODULE_ID__.get_cell_id(row * game__MODULE_ID__.width + col), _gel(game__MODULE_ID__.get_cell_id(row * game__MODULE_ID__.width + col)));
      }
    }
  }

  function selection_table_html__MODULE_ID__() {
    var result = "";
    result += '<table border="0" cellpadding="0px" cellspacing="0px">';
    for (var puznum = 0; puznum < 6; ++puznum) {
      result += '<td align="middle" align="center">';
      result += '<img title="Click here to try puzzle ' + (puznum + 1) + '" src="http://weihwa-puzzles.appspot.com/images/select-' + puznum + '.gif" style="cursor:pointer;cursor:hand" onclick="game__MODULE_ID__.action_reset_puzzle(' + puznum + ')"></img>';
      result += '</td>';
    }
    result += '</table>';
    return result;
  }

  function pass_key_press__MODULE_ID__(e) {
    var keynum;
    if (window.event) {
      keynum = e.keyCode;
    } else if (e.which) {
      keynum = e.which;
    }
    keychar = String.fromCharCode(keynum).toUpperCase();
    game__MODULE_ID__.puzzle.process_key_press(keynum, keychar);
  }

  if (document.addEventListener) {
    document.addEventListener("keyup", pass_key_press__MODULE_ID__, false);
  } else {
    document.attachEvent("onkeyup", pass_key_press__MODULE_ID__);
  }

// Javascript ends -->
</script>

<font size=-1>

<div style="position:relative;float:left;margin-right:3px;margin-top:0px;margin-bottom:0px;">
<SCRIPT LANGUAGE="JavaScript">
  document.write(selection_table_html__MODULE_ID__());
</SCRIPT>
</div>

<b>Mini Kakuro 2</b>:
Due to popular demand, here are some Mini Kakuro puzzles that have some more variety (and are a bit easier) than
<a target="_top" href="http://weihwa.feedback.googlepages.com/puzzlepage10">the last batch</a>.
Place the given digits into the grid so that no digit appears
more than once in any "word" and that the sum of the digits in the word match the
indicated sum.  (Sometimes one digit will be left over.)
<BR>

<SCRIPT LANGUAGE="JavaScript">
  document.write(table_html__MODULE_ID__());
</SCRIPT>

<font size=-2>
Drag letters from the "palette" on the left into the grid to place them.
You'll know you've solved it when all the sums turn
<span style="color:#008000">green</span>.  Click on a cell to get a keyboard-sensitive cursor.
</font>

<span id="dummy" style="cursor:pointer;cursor:hand;font-size:16pt;position:absolute;left:0px;top:0px"></span>
<SCRIPT LANGUAGE="JavaScript">
  init_dragging__MODULE_ID__();
</SCRIPT>


</FONT>


  ]]> 

  </Content>
</Module>


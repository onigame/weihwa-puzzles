<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs
    title="Wei-Hwa's Puzzles"
    description="Regular Puzzle Challenges from a Google Engineer"
    author="Wei-Hwa Huang and others"
    author_email="weihwa.feedback+ig20060915@gmail.com"
    author_link="http://weihwa-puzzles.appspot.com/"
    title_url="http://weihwa-puzzles.appspot.com/"
    author_location="Mountain View, CA, USA"
    author_affiliation="Google, Inc."
    screenshot="http://weihwa-puzzles.appspot.com/images/screenshot.png"
    thumbnail="http://weihwa-puzzles.appspot.com/images/thumbnail.png"
    height="250"
  />
  <Content type="html">

<![CDATA[

<style> 
body,td,a,p,.h{font-family:arial,sans-serif;}
</style>

<div style="display:none;">
Caching to attempt to foil IE's bug.  See: http://www.bazon.net/mishoo/articles.epl?art_id=958
<img src='http://weihwa-puzzles.appspot.com/images/pipeg1.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg2.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg3.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg4.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg5.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg6.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg7.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg8.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg9.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg10.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg11.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg12.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg13.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg14.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipeg15.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe1.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe2.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe3.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe4.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe5.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe6.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe7.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe8.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe9.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe10.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe11.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe12.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe13.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe14.png'>
<img src='http://weihwa-puzzles.appspot.com/images/pipe15.png'>
</div>

<div style="position:relative;float:right;margin-left:2px;margin-right:0px;margin-top:2px;margin-bottom:0px;">
<A TARGET="_top" HREF="http://weihwa-puzzles.appspot.com/"><IMG SRC="http://weihwa-puzzles.appspot.com/images/home.png"
     STYLE="border:0px"
     ALT="Puzzle Homepage: Play previous puzzles!"
     TITLE="Puzzle Homepage: Play previous puzzles!"
></A><A HREF="mailto:weihwa.feedback+20060915@gmail.com"><IMG SRC="http://weihwa-puzzles.appspot.com/images/mail.png"
     STYLE="border:0px"
     ALT="Click here to send feedback"
     TITLE="Click here to send feedback"
></A>
</div>

<!---
<script type="text/javascript" src="http://www.corp.google.com/~whuang/puzzlemodule/20060915-pipes/drag.js"></script>
<script type="text/javascript" src="http://www.corp.google.com/~whuang/puzzlemodule/20060915-pipes/puzzle-utils3.js"></script>
--->
<script type="text/javascript" src="http://weihwa-puzzles.appspot.com/js/drag.js"></script>
<script type="text/javascript" src="http://weihwa-puzzles.appspot.com/js/puzzle-utils3.js"></script>

<script type="text/javascript">
<!-- Javascript begins

  // Copyright 2006 Google, Inc.
  // Author: Wei-Hwa Huang

  ///////////////////////////////////////////////

  function puzzle_data__MODULE_ID__() {
    this.prefix = 'http://weihwa-puzzles.appspot.com/images/';
//    this.prefix = 'http://www.corp.google.com/~whuang/puzzlemodule/20060915-pipes/';
    this.resetPuzzleData(0);
  }

  puzzle_data__MODULE_ID__.prototype.resetPuzzle = function(puzzleNum) {
    this.resetPuzzleData(puzzleNum);
    this._IGGG_refreshAll();
  }

  puzzle_data__MODULE_ID__.prototype.hasNodeSinglet = function(node) {
    return (this.edges[node].size == 0); 
  }

  puzzle_data__MODULE_ID__.prototype.hasNode = function(row, col) {
    if (row < 0) return false;
    if (col < 0) return false;
    if (row >= this.height) return false;
    if (col >= this.width) return false;
    return this.hasNodeSinglet(row * this.width + col); 
  }

  puzzle_data__MODULE_ID__.prototype.addEdge = function(fromNode, toNode) {
    this.edges[fromNode].add(toNode);
    this.edges[toNode].add(fromNode);
  }

/*
  puzzle_data__MODULE_ID__.prototype.runPrim = function() {
    var r = Math.random();
    if (r < 0.25) this.addEdge(this.center, this.center-1);
    else if (r < 0.5) this.addEdge(this.center, this.center-this.width);
    else if (r < 0.75) this.addEdge(this.center, this.center+this.width);
    else this.addEdge(this.center, this.center+1);
 
    var connected = 2;
    var foo = 2;
    while (connected < this.height * this.width && foo < 2000) {
      foo++;
      var row = Math.floor(Math.random() * this.height);
      var col = Math.floor(Math.random() * this.width);
      var dir = Math.floor(Math.random() * 4);
      if (this.hasNode(row, col)) continue;
      if (dir == 0) {
        if (this.hasNode(row-1, col)) {
          this.addEdge(row*this.width+col, row*this.width+col-this.width);
          connected++;
        }
      } else if (dir == 1) {
        if (this.hasNode(row+1, col)) {
          this.addEdge(row*this.width+col, row*this.width+col+this.width);
          connected++;
        }
      } else if (dir == 2) {
        if (this.hasNode(row, col-1)) {
          this.addEdge(row*this.width+col, row*this.width+col-1);
          connected++;
        }
      } else {
        if (this.hasNode(row, col+1)) {
          this.addEdge(row*this.width+col, row*this.width+col+1);
          connected++;
        }
      }
    }
  }
*/

  puzzle_data__MODULE_ID__.prototype.runKruskal = function() {
    var temp = new Array();
    for (var i=0; i<this.height * this.width; ++i) {
      temp[i] = i;
    }
    var num_trees = this.height * this.width;
    while (num_trees > 1) {
      var node1, node2;
      if (Math.random() < 0.5) {
        if (this.wrap) {
          node1 = Math.floor(Math.random() * this.height) * this.width + Math.floor(Math.random() * this.width);
          node2 = node1 + this.width;  if (node2 >= this.height * this.width) node2 -= this.height * this.width;
        } else {
          node1 = Math.floor(Math.random() * (this.height - 1)) * this.width + Math.floor(Math.random() * this.width);
          node2 = node1 + this.width;
        }
      } else {
        if (this.wrap) {
          node1 = Math.floor(Math.random() * this.height) * this.width + Math.floor(Math.random() * this.width);
          node2 = node1 + 1;  if (node2 % this.width == 0) node2 -= this.width;
        } else {
          node1 = Math.floor(Math.random() * this.height) * this.width + Math.floor(Math.random() * (this.width - 1));
          node2 = node1 + 1;
        }
      }
      var val1 = node1;  while (val1 != temp[val1]) val1 = temp[val1];
      var val2 = node2;  while (val2 != temp[val2]) val2 = temp[val2];
      if (val1 != val2) {
        this.addEdge(node1, node2);
        num_trees--;
        temp[val1] = val2;
      }
    }
  }

  puzzle_data__MODULE_ID__.prototype.rotate = function(val) {
    var t = val * 2;
    return (t < 16) ? t : (t - 15);
  }

  puzzle_data__MODULE_ID__.prototype.resetPuzzleData = function(index) {
    if (index == 0) {
      this.height = 5;
      this.width = 5;
      this.wrap = false;
    } else if (index == 1) {
      this.height = 9;
      this.width = 9;
      this.wrap = false;
    } else if (index == 2) {
      this.height = 13;
      this.width = 13;
      this.wrap = false;
    } else if (index == 3) {
      this.height = 25;
      this.width = 13;
      this.wrap = false;
    } else if (index == 4) {
      this.height = 7;
      this.width = 7;
      this.wrap = true;
    } else {
      this.height = 25;
      this.width = 13;
      this.wrap = true;
    }
    this.center = Math.floor(this.height/2) * this.width + Math.floor(this.width/2);

    this.edges = new Array();
    for (var i=0; i<this.height * this.width; ++i) {
      this.edges[i] = new Set();
    }

//    this.runPrim();
    this.runKruskal();

    this.nodes = new Array();
    this.green = new Array();
    for (var i=0; i<this.height * this.width; ++i) {
      this.green[i] = 0;
      this.nodes[i] = 0;
      if (this.edges[i].has(i-1)) this.nodes[i] += 8;
      if (this.edges[i].has(i+this.width)) this.nodes[i] += 4;
      if (this.edges[i].has(i+1)) this.nodes[i] += 2;
      if (this.edges[i].has(i-this.width)) this.nodes[i] += 1;

      if (this.edges[i].has(i+this.width-1)) this.nodes[i] += 8;
      if (this.edges[i].has(i+this.width-this.height*this.width)) this.nodes[i] += 4;
      if (this.edges[i].has(i-this.width+1)) this.nodes[i] += 2;
      if (this.edges[i].has(i-this.width+this.height*this.width)) this.nodes[i] += 1;
      var spin = Math.random() * 4;
      for (var j=0; j<spin; ++j) {
        this.nodes[i] = this.rotate(this.nodes[i]);
      }
    }

    this.greenNode = Math.floor(Math.random() * this.width * this.height);
    this.markGreen(false);
  }

  puzzle_data__MODULE_ID__.prototype.testWest = function(val1, val2) {
    if ((this.tempGreen[val2] == 0)
     && (this.nodes[val1] >= 8)
     && (this.nodes[val2] % 4 >= 2))
      this.recurseGreen(val2);
  }

  puzzle_data__MODULE_ID__.prototype.testEast = function(val1, val2) {
    if ((this.tempGreen[val2] == 0)
     && (this.nodes[val2] >= 8)
     && (this.nodes[val1] % 4 >= 2))
      this.recurseGreen(val2);
  }

  puzzle_data__MODULE_ID__.prototype.testNorth = function(val1, val2) {
    if ((this.tempGreen[val2] == 0)
     && (this.nodes[val2] % 8 >= 4)
     && (this.nodes[val1] % 2 == 1))
      this.recurseGreen(val2);
  }

  puzzle_data__MODULE_ID__.prototype.testSouth = function(val1, val2) {
    if ((this.tempGreen[val2] == 0)
     && (this.nodes[val1] % 8 >= 4)
     && (this.nodes[val2] % 2 == 1))
      this.recurseGreen(val2);
  }

  puzzle_data__MODULE_ID__.prototype.recurseGreen = function(val) {
    this.tempGreen[val] = 1;
    this.greenCount--;
    if (val % this.width != 0) {
      this.testWest(val, val-1);
    } else if (this.wrap) {
      this.testWest(val, val+this.width-1);
    }
    if (val % this.width != this.width-1) {
      this.testEast(val, val+1);
    } else if (this.wrap) {
      this.testEast(val, val-this.width+1);
    }
    if (val / this.width >= 1) {
      this.testNorth(val, val-this.width);
    } else if (this.wrap) {
      this.testNorth(val, val-this.width+this.width*this.height);
    }
    if (val / this.width < this.height-1) {
      this.testSouth(val, val+this.width);
    } else if (this.wrap) {
      this.testSouth(val, val+this.width-this.width*this.height);
    }
  }

  puzzle_data__MODULE_ID__.prototype.markGreen = function(refresh) {
    this.tempGreen = new Array();
    this.greenCount = this.height * this.width;
    for (var i=0; i<this.height * this.width; ++i) {
      this.tempGreen[i] = 0;
    }
    this.recurseGreen(this.greenNode);
    for (var i=0; i<this.height * this.width; ++i) {
      if (this.tempGreen[i] != this.green[i]) {
        this.green[i] = this.tempGreen[i];
        if (refresh) this._IGGG_refreshCell(i);
      }
    }
    if (this.greenCount == 0)
      _gel("win").innerHTML = "Congratulations!";
    else 
      _gel("win").innerHTML = this.greenCount + " left";
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_getNormalView = function(index) {
    if (this.green[index])
      return '<img src="' + this.prefix + 'pipeg' + this.nodes[index] + '.png" alt="' + this.nodes[index] + '" title="pipe">';
    else
      return '<img src="' + this.prefix + 'pipe' + this.nodes[index] + '.png" alt="' + this.nodes[index] + '" title="pipe">';
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_getSourceView = function(source, target) {
    return this._IGGG_getNormalView(source);
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_getTargetView = function(source, target) {
    return this._IGGG_getNormalView(target);
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_getDragView = function(index) {
    return this._IGGG_getNormalView(index);
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_getSurrogateView = function(index) {
    return ("");
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleDrag = function(source, target) {
    this.nodes[source] = this.rotate(this.nodes[source]);
    this._IGGG_refreshCell(source);
    this.markGreen(true);
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleClick = function(source) {
    // do nothing
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_isDragSource = function(index) {
    return true;
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_isDragTarget = function(index) {
    return false;
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleOnDragStart = function(object) {
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleOnDragTargetHit = function(object) {
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleOnDragTargetLost = function(object) {
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleOnDragEnd = function(s_object, t_object) {
  }

  puzzle_data__MODULE_ID__.prototype._IGGG_handleOnDragClick = function(object) {
  }

  //   _IGGG_refreshCell(index)
  //   _IGGG_addDragSource(index)
  //   _IGGG_removeDragSource(index)
  //   _IGGG_refreshDragSources()
  //   _IGGG_addDragTarget(index)
  //   _IGGG_removeDragTarget(index)
  //   _IGGG_refreshDragTargets()

  ///////////////////////////////////////
  
  var puzzle__MODULE_ID__;
  var game__MODULE_ID__;
  _IG_RegisterOnloadHandler(start__MODULE_ID__);

  function start__MODULE_ID__() {
    puzzle__MODULE_ID__ = new puzzle_data__MODULE_ID__();
    game__MODULE_ID__ = new _IG_GameGrid(puzzle__MODULE_ID__, "mygrid", puzzle__MODULE_ID__.height, puzzle__MODULE_ID__.width);
    _gel("table_html").innerHTML = game__MODULE_ID__.getTableHTML();
    game__MODULE_ID__.initDragging();
    _gel("selection_table_html").innerHTML = selection_table_html__MODULE_ID__();
  }

  function reset__MODULE_ID__(puznum) {
    puzzle__MODULE_ID__.resetPuzzle(puznum);
    game__MODULE_ID__ = new _IG_GameGrid(puzzle__MODULE_ID__, "mygrid", puzzle__MODULE_ID__.height, puzzle__MODULE_ID__.width);
    _gel("table_html").innerHTML = game__MODULE_ID__.getTableHTML();
    game__MODULE_ID__.initDragging();
    _gel("selection_table_html").innerHTML = selection_table_html__MODULE_ID__();
  }

  function selection_table_html__MODULE_ID__() {
    var result = "";
    result += '<table border="0" cellpadding="0px" cellspacing="0px">';
    for (var puznum = 0; puznum < 6; ++puznum) {
      result += '<td align="middle" align="center">';
      result += '<img title="Click here to try puzzle ' + (puznum + 1) + '" src="http://weihwa-puzzles.appspot.com/images/select-' + puznum + '.gif" style="cursor:pointer;cursor:hand" onclick="reset__MODULE_ID__(' + puznum + ')"></img>';
      result += '</td>';
    }
    result += '</table>';
    return result;
  }

// Javascript ends -->
</script>

<font size=-1>

<div style="position:relative;float:left;margin-right:3px;margin-top:0px;margin-bottom:0px;">
<span id="selection_table_html"></span>
</div>

<b>Pipe Spin</b>:  
Spin the pipes such that all pipes become green.
<span id="showrules" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline"
   onclick="_gel('rules').style.display='inline';_gel('showrules').style.display='none';_gel('hiderules').style.display='inline'">Rules.</span>
<span id="hiderules" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline;display:none"
   onclick="_gel('rules').style.display='none';_gel('showrules').style.display='inline';_gel('hiderules').style.display='none'">Hide Rules.</span>
<span id="rules" style="display:none;font-size:x-small">
   One pipe has a "water source" (colored <span style="background-color:#ABFF73">green</span>), and anything connected to that
   pipe also gets water.  To win, all pipes must be connected.  On harder levels, pipes may "wrap around" (connections above
   reconnect to connections below, and same for left-to-right).
   To win, all pipes must get to the "water source".
</span>
<span id="showinstructions" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline"
   onclick="_gel('instructions').style.display='inline';_gel('showinstructions').style.display='none';_gel('hideinstructions').style.display='inline'">How to Play.</span>
<span id="hideinstructions" style="cursor:pointer;cursor:hand;color:blue;text-decoration:underline;display:none"
   onclick="_gel('instructions').style.display='none';_gel('showinstructions').style.display='inline';_gel('hideinstructions').style.display='none'">Hide How to Play.</span>
<span id="instructions" style="display:none;font-size:x-small">
   Click on a pipe to rotate it 90 degrees clockwise.  After choosing a new puzzle, you may have to resize your browser window a bit to force the refresh.
</span>
(Warning: puzzles 4 and 6 are <b>big</b>!)

<HR>
<span id="table_html"></span>
<span id="win"></span>

<span id="debug1" style="font-size:16pt;font-weight:bold"></span>

<BR>
<font size=-2>Multiple users have complained about the bottom of the large puzzles not showing up on their screen.  In <a target="top" href="http://www.mozilla.com/firefox/">Firefox</a>, you can
click on the title bar of the gadget (the blue area on top) to request the space.  In Internet Explorer, you can resize the window horizontally a little bit.
</font>


</FONT>

  ]]> 

  </Content>
</Module>

